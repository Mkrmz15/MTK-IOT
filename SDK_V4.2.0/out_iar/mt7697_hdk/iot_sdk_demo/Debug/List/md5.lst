###############################################################################
#
# IAR ANSI C/C++ Compiler V7.80.1.11864/W32 for ARM       25/Jan/2017  17:35:17
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\middleware\third_party\mbedtls\library\md5.c
#    Command line =  
#        "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\middleware\third_party\mbedtls\library\md5.c" -D
#        MTK_LOAD_MAC_ADDR_FROM_EFUSE -D MTK_PING_OUT_ENABLE -D
#        MTK_WIFI_PROFILE_ENABLE -D PCFG_OS=2 -D _REENT_SMALL -D
#        MTK_MINISUPP_ENABLE -D MTK_MINICLI_ENABLE -D MTK_BSPEXT_ENABLE -D
#        MTK_HAL_LOWPOWER_ENABLE -D MTK_LWIP_ENABLE -D
#        MTK_HTTPCLIENT_SSL_ENABLE -D MTK_IPERF_ENABLE -D PRODUCT_VERSION=7697
#        -D MTK_WIFI_TGN_VERIFY_ENABLE -D MTK_SMTCN_ENABLE -D
#        MTK_CLI_TEST_MODE_ENABLE -D MTK_WIFI_REPEATER_ENABLE -D
#        CONFIG_REPEATER -D MTK_DEBUG_LEVEL_INFO -D MTK_DEBUG_LEVEL_WARNING -D
#        MTK_DEBUG_LEVEL_ERROR -D configOVERRIDE_DEFAULT_TICK_CONFIGURATION -D
#        CFG_SUPPORT_SMNT_PROTO=2 -D BT_DEBUG -D MTK_BLE_CLI_ENABLE -D
#        MTK_BLE_BQB_CLI_ENABLE -D MTK_HCI_CONSOLE_MIX_ENABLE -D
#        MTK_BLE_BQB_TEST_ENABLE -D MTK_BLE_SMTCN_ENABLE -D SUPPORT_MBEDTLS -D
#        MBEDTLS_CONFIG_FILE=<config-mtk-basic.h> -D MTK_NVDM_ENABLE -D
#        MTK_WIFI_PRIVILEGE_ENABLE -D MTK_MCS_ENABLE -D MTK_BLE_GPIO_SERVICE -D
#        __BT_DEBUG__ -lcN "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\out_iar\mt7697_hdk\iot_sdk_demo\Debug\List" -lA
#        "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\out_iar\mt7697_hdk\iot_sdk_demo\Debug\List"
#        --diag_suppress Pa050,Ta022,Ta023 --diag_error Pe606 -o
#        "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\out_iar\mt7697_hdk\iot_sdk_demo\Debug\Obj" --no_unroll
#        --no_inline --no_tbaa --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.5\arm\INC\c\DLib_Config_Full.h"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\inc\" -I
#        "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\kernel\service\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\kernel\rtos\FreeRTOS\Source\include\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\kernel\rtos\FreeRTOS\Source\portable\IAR\ARM_CM4F\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\kernel\rtos\FreeRTOS\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\CMSIS\Device\MTK\mt7687\Include\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\CMSIS\Include\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\chip\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\chip\mt7687\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\board\mt76x7_hdk\wifi\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\third_party\dhcpd\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\MTK\minicli\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\MTK\minisupp\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\chip\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\chip\mt7687\src\common\include\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\third_party\lwip\src\include\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\third_party\lwip\ports\include\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\third_party\lwip\src\include\lwip\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\project\common\bsp_ex\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\MTK\nvdm\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\third_party\ping\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\MTK\smtcn\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\MTK\iperf\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\project\mt7697_hdk\apps\iot_sdk_demo\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\chip\mt7687\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\board\mt76x7_hdk\util\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\board\mt76x7_hdk\wifi\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\MTK\bluetooth\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\project\mt7697_hdk\apps\iot_sdk_demo\src\ut_app\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\board\mt76x7_hdk\ept\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\third_party\mbedtls\include\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\third_party\mbedtls\configs\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\board\mt76x7_hdk\external_flash\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\third_party\httpclient\inc\"
#        -Om -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\CMSIS\Include\"
#    Locale       =  Chinese (Simplified)_CHN.936
#    List file    =  
#        C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\out_iar\mt7697_hdk\iot_sdk_demo\Debug\List\md5.lst
#    Object file  =  
#        C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\out_iar\mt7697_hdk\iot_sdk_demo\Debug\Obj\md5.o
#
###############################################################################

C:\LEO\myGit\MTK IOT\SDK_V4.2.0\middleware\third_party\mbedtls\library\md5.c
      1          /*
      2           *  RFC 1321 compliant MD5 implementation
      3           *
      4           *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
      5           *  SPDX-License-Identifier: Apache-2.0
      6           *
      7           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
      8           *  not use this file except in compliance with the License.
      9           *  You may obtain a copy of the License at
     10           *
     11           *  http://www.apache.org/licenses/LICENSE-2.0
     12           *
     13           *  Unless required by applicable law or agreed to in writing, software
     14           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     15           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     16           *  See the License for the specific language governing permissions and
     17           *  limitations under the License.
     18           *
     19           *  This file is part of mbed TLS (https://tls.mbed.org)
     20           */
     21          /*
     22           *  The MD5 algorithm was designed by Ron Rivest in 1991.
     23           *
     24           *  http://www.ietf.org/rfc/rfc1321.txt
     25           */
     26          
     27          #if !defined(MBEDTLS_CONFIG_FILE)
     28          #include "mbedtls/config.h"
     29          #else
     30          #include MBEDTLS_CONFIG_FILE
     31          #endif
     32          
     33          #if defined(MBEDTLS_MD5_C)
     34          
     35          #include "mbedtls/md5.h"
     36          #if defined(MBEDTLS_THREADING_C) && defined(MBEDTLS_MD5_ALT)
     37          #include "mbedtls/threading.h"
     38          #endif
     39          
     40          #include <string.h>
     41          
     42          #if defined(MBEDTLS_SELF_TEST)
     43          #if defined(MBEDTLS_PLATFORM_C)
     44          #include "mbedtls/platform.h"
     45          #else
     46          #include <stdio.h>
     47          #define mbedtls_printf printf
     48          #endif /* MBEDTLS_PLATFORM_C */
     49          #endif /* MBEDTLS_SELF_TEST */
     50          
     51          #if !defined(MBEDTLS_MD5_ALT)
     52          
     53          /* Implementation that should never be optimized out by the compiler */
     54          static void mbedtls_zeroize( void *v, size_t n ) {
     55              volatile unsigned char *p = v; while( n-- ) *p++ = 0;
     56          }
     57          
     58          /*
     59           * 32-bit integer manipulation macros (little endian)
     60           */
     61          #ifndef GET_UINT32_LE
     62          #define GET_UINT32_LE(n,b,i)                            \
     63          {                                                       \
     64              (n) = ( (uint32_t) (b)[(i)    ]       )             \
     65                  | ( (uint32_t) (b)[(i) + 1] <<  8 )             \
     66                  | ( (uint32_t) (b)[(i) + 2] << 16 )             \
     67                  | ( (uint32_t) (b)[(i) + 3] << 24 );            \
     68          }
     69          #endif
     70          
     71          #ifndef PUT_UINT32_LE
     72          #define PUT_UINT32_LE(n,b,i)                                    \
     73          {                                                               \
     74              (b)[(i)    ] = (unsigned char) ( ( (n)       ) & 0xFF );    \
     75              (b)[(i) + 1] = (unsigned char) ( ( (n) >>  8 ) & 0xFF );    \
     76              (b)[(i) + 2] = (unsigned char) ( ( (n) >> 16 ) & 0xFF );    \
     77              (b)[(i) + 3] = (unsigned char) ( ( (n) >> 24 ) & 0xFF );    \
     78          }
     79          #endif
     80          
     81          void mbedtls_md5_init( mbedtls_md5_context *ctx )
     82          {
     83              memset( ctx, 0, sizeof( mbedtls_md5_context ) );
     84          }
     85          
     86          void mbedtls_md5_free( mbedtls_md5_context *ctx )
     87          {
     88              if( ctx == NULL )
     89                  return;
     90          
     91              mbedtls_zeroize( ctx, sizeof( mbedtls_md5_context ) );
     92          }
     93          
     94          void mbedtls_md5_clone( mbedtls_md5_context *dst,
     95                                  const mbedtls_md5_context *src )
     96          {
     97              *dst = *src;
     98          }
     99          
    100          /*
    101           * MD5 context setup
    102           */
    103          void mbedtls_md5_starts( mbedtls_md5_context *ctx )
    104          {
    105              ctx->total[0] = 0;
    106              ctx->total[1] = 0;
    107          
    108              ctx->state[0] = 0x67452301;
    109              ctx->state[1] = 0xEFCDAB89;
    110              ctx->state[2] = 0x98BADCFE;
    111              ctx->state[3] = 0x10325476;
    112          }
    113          
    114          #if !defined(MBEDTLS_MD5_PROCESS_ALT)
    115          void mbedtls_md5_process( mbedtls_md5_context *ctx, const unsigned char data[64] )
    116          {
    117              uint32_t X[16], A, B, C, D;
    118          
    119              GET_UINT32_LE( X[ 0], data,  0 );
    120              GET_UINT32_LE( X[ 1], data,  4 );
    121              GET_UINT32_LE( X[ 2], data,  8 );
    122              GET_UINT32_LE( X[ 3], data, 12 );
    123              GET_UINT32_LE( X[ 4], data, 16 );
    124              GET_UINT32_LE( X[ 5], data, 20 );
    125              GET_UINT32_LE( X[ 6], data, 24 );
    126              GET_UINT32_LE( X[ 7], data, 28 );
    127              GET_UINT32_LE( X[ 8], data, 32 );
    128              GET_UINT32_LE( X[ 9], data, 36 );
    129              GET_UINT32_LE( X[10], data, 40 );
    130              GET_UINT32_LE( X[11], data, 44 );
    131              GET_UINT32_LE( X[12], data, 48 );
    132              GET_UINT32_LE( X[13], data, 52 );
    133              GET_UINT32_LE( X[14], data, 56 );
    134              GET_UINT32_LE( X[15], data, 60 );
    135          
    136          #define S(x,n) ((x << n) | ((x & 0xFFFFFFFF) >> (32 - n)))
    137          
    138          #define P(a,b,c,d,k,s,t)                                \
    139          {                                                       \
    140              a += F(b,c,d) + X[k] + t; a = S(a,s) + b;           \
    141          }
    142          
    143              A = ctx->state[0];
    144              B = ctx->state[1];
    145              C = ctx->state[2];
    146              D = ctx->state[3];
    147          
    148          #define F(x,y,z) (z ^ (x & (y ^ z)))
    149          
    150              P( A, B, C, D,  0,  7, 0xD76AA478 );
    151              P( D, A, B, C,  1, 12, 0xE8C7B756 );
    152              P( C, D, A, B,  2, 17, 0x242070DB );
    153              P( B, C, D, A,  3, 22, 0xC1BDCEEE );
    154              P( A, B, C, D,  4,  7, 0xF57C0FAF );
    155              P( D, A, B, C,  5, 12, 0x4787C62A );
    156              P( C, D, A, B,  6, 17, 0xA8304613 );
    157              P( B, C, D, A,  7, 22, 0xFD469501 );
    158              P( A, B, C, D,  8,  7, 0x698098D8 );
    159              P( D, A, B, C,  9, 12, 0x8B44F7AF );
    160              P( C, D, A, B, 10, 17, 0xFFFF5BB1 );
    161              P( B, C, D, A, 11, 22, 0x895CD7BE );
    162              P( A, B, C, D, 12,  7, 0x6B901122 );
    163              P( D, A, B, C, 13, 12, 0xFD987193 );
    164              P( C, D, A, B, 14, 17, 0xA679438E );
    165              P( B, C, D, A, 15, 22, 0x49B40821 );
    166          
    167          #undef F
    168          
    169          #define F(x,y,z) (y ^ (z & (x ^ y)))
    170          
    171              P( A, B, C, D,  1,  5, 0xF61E2562 );
    172              P( D, A, B, C,  6,  9, 0xC040B340 );
    173              P( C, D, A, B, 11, 14, 0x265E5A51 );
    174              P( B, C, D, A,  0, 20, 0xE9B6C7AA );
    175              P( A, B, C, D,  5,  5, 0xD62F105D );
    176              P( D, A, B, C, 10,  9, 0x02441453 );
    177              P( C, D, A, B, 15, 14, 0xD8A1E681 );
    178              P( B, C, D, A,  4, 20, 0xE7D3FBC8 );
    179              P( A, B, C, D,  9,  5, 0x21E1CDE6 );
    180              P( D, A, B, C, 14,  9, 0xC33707D6 );
    181              P( C, D, A, B,  3, 14, 0xF4D50D87 );
    182              P( B, C, D, A,  8, 20, 0x455A14ED );
    183              P( A, B, C, D, 13,  5, 0xA9E3E905 );
    184              P( D, A, B, C,  2,  9, 0xFCEFA3F8 );
    185              P( C, D, A, B,  7, 14, 0x676F02D9 );
    186              P( B, C, D, A, 12, 20, 0x8D2A4C8A );
    187          
    188          #undef F
    189          
    190          #define F(x,y,z) (x ^ y ^ z)
    191          
    192              P( A, B, C, D,  5,  4, 0xFFFA3942 );
    193              P( D, A, B, C,  8, 11, 0x8771F681 );
    194              P( C, D, A, B, 11, 16, 0x6D9D6122 );
    195              P( B, C, D, A, 14, 23, 0xFDE5380C );
    196              P( A, B, C, D,  1,  4, 0xA4BEEA44 );
    197              P( D, A, B, C,  4, 11, 0x4BDECFA9 );
    198              P( C, D, A, B,  7, 16, 0xF6BB4B60 );
    199              P( B, C, D, A, 10, 23, 0xBEBFBC70 );
    200              P( A, B, C, D, 13,  4, 0x289B7EC6 );
    201              P( D, A, B, C,  0, 11, 0xEAA127FA );
    202              P( C, D, A, B,  3, 16, 0xD4EF3085 );
    203              P( B, C, D, A,  6, 23, 0x04881D05 );
    204              P( A, B, C, D,  9,  4, 0xD9D4D039 );
    205              P( D, A, B, C, 12, 11, 0xE6DB99E5 );
    206              P( C, D, A, B, 15, 16, 0x1FA27CF8 );
    207              P( B, C, D, A,  2, 23, 0xC4AC5665 );
    208          
    209          #undef F
    210          
    211          #define F(x,y,z) (y ^ (x | ~z))
    212          
    213              P( A, B, C, D,  0,  6, 0xF4292244 );
    214              P( D, A, B, C,  7, 10, 0x432AFF97 );
    215              P( C, D, A, B, 14, 15, 0xAB9423A7 );
    216              P( B, C, D, A,  5, 21, 0xFC93A039 );
    217              P( A, B, C, D, 12,  6, 0x655B59C3 );
    218              P( D, A, B, C,  3, 10, 0x8F0CCC92 );
    219              P( C, D, A, B, 10, 15, 0xFFEFF47D );
    220              P( B, C, D, A,  1, 21, 0x85845DD1 );
    221              P( A, B, C, D,  8,  6, 0x6FA87E4F );
    222              P( D, A, B, C, 15, 10, 0xFE2CE6E0 );
    223              P( C, D, A, B,  6, 15, 0xA3014314 );
    224              P( B, C, D, A, 13, 21, 0x4E0811A1 );
    225              P( A, B, C, D,  4,  6, 0xF7537E82 );
    226              P( D, A, B, C, 11, 10, 0xBD3AF235 );
    227              P( C, D, A, B,  2, 15, 0x2AD7D2BB );
    228              P( B, C, D, A,  9, 21, 0xEB86D391 );
    229          
    230          #undef F
    231          
    232              ctx->state[0] += A;
    233              ctx->state[1] += B;
    234              ctx->state[2] += C;
    235              ctx->state[3] += D;
    236          }
    237          #endif /* !MBEDTLS_MD5_PROCESS_ALT */
    238          
    239          /*
    240           * MD5 process buffer
    241           */
    242          void mbedtls_md5_update( mbedtls_md5_context *ctx, const unsigned char *input, size_t ilen )
    243          {
    244              size_t fill;
    245              uint32_t left;
    246          
    247              if( ilen == 0 )
    248                  return;
    249          
    250              left = ctx->total[0] & 0x3F;
    251              fill = 64 - left;
    252          
    253              ctx->total[0] += (uint32_t) ilen;
    254              ctx->total[0] &= 0xFFFFFFFF;
    255          
    256              if( ctx->total[0] < (uint32_t) ilen )
    257                  ctx->total[1]++;
    258          
    259              if( left && ilen >= fill )
    260              {
    261                  memcpy( (void *) (ctx->buffer + left), input, fill );
    262                  mbedtls_md5_process( ctx, ctx->buffer );
    263                  input += fill;
    264                  ilen  -= fill;
    265                  left = 0;
    266              }
    267          
    268              while( ilen >= 64 )
    269              {
    270                  mbedtls_md5_process( ctx, input );
    271                  input += 64;
    272                  ilen  -= 64;
    273              }
    274          
    275              if( ilen > 0 )
    276              {
    277                  memcpy( (void *) (ctx->buffer + left), input, ilen );
    278              }
    279          }
    280          
    281          static const unsigned char md5_padding[64] =
    282          {
    283           0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    284              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    285              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    286              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    287          };
    288          
    289          /*
    290           * MD5 final digest
    291           */
    292          void mbedtls_md5_finish( mbedtls_md5_context *ctx, unsigned char output[16] )
    293          {
    294              uint32_t last, padn;
    295              uint32_t high, low;
    296              unsigned char msglen[8];
    297          
    298              high = ( ctx->total[0] >> 29 )
    299                   | ( ctx->total[1] <<  3 );
    300              low  = ( ctx->total[0] <<  3 );
    301          
    302              PUT_UINT32_LE( low,  msglen, 0 );
    303              PUT_UINT32_LE( high, msglen, 4 );
    304          
    305              last = ctx->total[0] & 0x3F;
    306              padn = ( last < 56 ) ? ( 56 - last ) : ( 120 - last );
    307          
    308              mbedtls_md5_update( ctx, md5_padding, padn );
    309              mbedtls_md5_update( ctx, msglen, 8 );
    310          
    311              PUT_UINT32_LE( ctx->state[0], output,  0 );
    312              PUT_UINT32_LE( ctx->state[1], output,  4 );
    313              PUT_UINT32_LE( ctx->state[2], output,  8 );
    314              PUT_UINT32_LE( ctx->state[3], output, 12 );
    315          }
    316          #else
    317          
    318          void mbedtls_md5_init( mbedtls_md5_context *ctx )
    319          {
    320              memset( ctx, 0, sizeof( mbedtls_md5_context ) );
    321          }
    322          
    323          void mbedtls_md5_free( mbedtls_md5_context *ctx )
    324          {
    325              if( ctx == NULL )
    326                  return;
    327              memset( ctx, 0, sizeof( mbedtls_md5_context ) );
    328          }
    329          
    330          void mbedtls_md5_clone( mbedtls_md5_context *dst,
    331                                  const mbedtls_md5_context *src )
    332          {
    333              *dst = *src;
    334          }
    335          
    336          void mbedtls_md5_starts( mbedtls_md5_context *ctx )
    337          {
    338              int ret;
    339          
    340              do {
    341                  ret = (int)hal_md5_init(ctx);
    342                  if( ret == -100 )
    343                      delay_ms(1);
    344              } while( ret == -100 );
    345          }
    346          
    347          void mbedtls_md5_update( mbedtls_md5_context *ctx, const unsigned char *input, size_t ilen )
    348          {
    349              int ret;
    350          
    351              do {
    352                  ret = (int)hal_md5_append( ctx, (uint8_t*)input, (uint32_t)ilen);
    353                  if( ret == -100 )
    354                      delay_ms(1);
    355              } while( ret == -100 );
    356          }
    357          
    358          void mbedtls_md5_finish( mbedtls_md5_context *ctx, unsigned char output[16] )
    359          {
    360              int ret;
    361          
    362              do {
    363                  ret = (int)hal_md5_end( ctx, (uint8_t*)output);
    364                  if( ret == -100 )
    365                      delay_ms(1);
    366              } while( ret == -100 );
    367          }
    368          
    369          void mbedtls_md5_process( mbedtls_md5_context *ctx, const unsigned char data[64] )
    370          {
    371              int ret;
    372              ctx->block = data;
    373              ctx->block_length = 64;
    374          
    375              do {
    376                  ret = (int)crypt_md5_hash(ctx);
    377                  if( ret == -100 )
    378                      delay_ms(1);
    379              } while( ret == -100 );
    380          }
    381          
    382          #endif /* !MBEDTLS_MD5_ALT */
    383          
    384          /*
    385           * output = MD5( input buffer )
    386           */
    387          void mbedtls_md5( const unsigned char *input, size_t ilen, unsigned char output[16] )
    388          {
    389              mbedtls_md5_context ctx;
    390          
    391              mbedtls_md5_init( &ctx );
    392              mbedtls_md5_starts( &ctx );
    393              mbedtls_md5_update( &ctx, input, ilen );
    394              mbedtls_md5_finish( &ctx, output );
    395              mbedtls_md5_free( &ctx );
    396          }
    397          
    398          #if defined(MBEDTLS_SELF_TEST)
    399          /*
    400           * RFC 1321 test vectors
    401           */
    402          static const unsigned char md5_test_buf[7][81] =
    403          {
    404              { "" },
    405              { "a" },
    406              { "abc" },
    407              { "message digest" },
    408              { "abcdefghijklmnopqrstuvwxyz" },
    409              { "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789" },
    410              { "12345678901234567890123456789012345678901234567890123456789012" \
    411                "345678901234567890" }
    412          };
    413          
    414          static const int md5_test_buflen[7] =
    415          {
    416              0, 1, 3, 14, 26, 62, 80
    417          };
    418          
    419          static const unsigned char md5_test_sum[7][16] =
    420          {
    421              { 0xD4, 0x1D, 0x8C, 0xD9, 0x8F, 0x00, 0xB2, 0x04,
    422                0xE9, 0x80, 0x09, 0x98, 0xEC, 0xF8, 0x42, 0x7E },
    423              { 0x0C, 0xC1, 0x75, 0xB9, 0xC0, 0xF1, 0xB6, 0xA8,
    424                0x31, 0xC3, 0x99, 0xE2, 0x69, 0x77, 0x26, 0x61 },
    425              { 0x90, 0x01, 0x50, 0x98, 0x3C, 0xD2, 0x4F, 0xB0,
    426                0xD6, 0x96, 0x3F, 0x7D, 0x28, 0xE1, 0x7F, 0x72 },
    427              { 0xF9, 0x6B, 0x69, 0x7D, 0x7C, 0xB7, 0x93, 0x8D,
    428                0x52, 0x5A, 0x2F, 0x31, 0xAA, 0xF1, 0x61, 0xD0 },
    429              { 0xC3, 0xFC, 0xD3, 0xD7, 0x61, 0x92, 0xE4, 0x00,
    430                0x7D, 0xFB, 0x49, 0x6C, 0xCA, 0x67, 0xE1, 0x3B },
    431              { 0xD1, 0x74, 0xAB, 0x98, 0xD2, 0x77, 0xD9, 0xF5,
    432                0xA5, 0x61, 0x1C, 0x2C, 0x9F, 0x41, 0x9D, 0x9F },
    433              { 0x57, 0xED, 0xF4, 0xA2, 0x2B, 0xE3, 0xC9, 0x55,
    434                0xAC, 0x49, 0xDA, 0x2E, 0x21, 0x07, 0xB6, 0x7A }
    435          };
    436          
    437          /*
    438           * Checkup routine
    439           */
    440          int mbedtls_md5_self_test( int verbose )
    441          {
    442              int i;
    443              unsigned char md5sum[16];
    444          
    445              for( i = 0; i < 7; i++ )
    446              {
    447                  if( verbose != 0 )
    448                      mbedtls_printf( "  MD5 test #%d: ", i + 1 );
    449          
    450                  mbedtls_md5( md5_test_buf[i], md5_test_buflen[i], md5sum );
    451          
    452                  if( memcmp( md5sum, md5_test_sum[i], 16 ) != 0 )
    453                  {
    454                      if( verbose != 0 )
    455                          mbedtls_printf( "failed\n" );
    456          
    457                      return( 1 );
    458                  }
    459          
    460                  if( verbose != 0 )
    461                      mbedtls_printf( "passed\n" );
    462              }
    463          
    464              if( verbose != 0 )
    465                  mbedtls_printf( "\n" );
    466          
    467              return( 0 );
    468          }
    469          
    470          #endif /* MBEDTLS_SELF_TEST */
    471          
    472          #endif /* MBEDTLS_MD5_C */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
     104   mbedtls_md5
       104   -> mbedtls_md5_finish
       104   -> mbedtls_md5_free
       104   -> mbedtls_md5_init
       104   -> mbedtls_md5_starts
       104   -> mbedtls_md5_update
       0   mbedtls_md5_clone
         0   -> __aeabi_memcpy4
      24   mbedtls_md5_finish
        24   -> mbedtls_md5_update
       0   mbedtls_md5_free
         0   -> mbedtls_zeroize
       0   mbedtls_md5_init
         0   -> __aeabi_memset4
      76   mbedtls_md5_process
      40   mbedtls_md5_self_test
        40   -- Indirect call
        40   -> mbedtls_md5
        40   -> memcmp
       0   mbedtls_md5_starts
      24   mbedtls_md5_update
         0   -> __aeabi_memcpy
        24   -> __aeabi_memcpy
        24   -> mbedtls_md5_process
       0   mbedtls_zeroize


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable11
       4  ??DataTable11_1
       4  ??DataTable11_10
       4  ??DataTable11_11
       4  ??DataTable11_12
       4  ??DataTable11_13
       4  ??DataTable11_14
       4  ??DataTable11_15
       4  ??DataTable11_16
       4  ??DataTable11_17
       4  ??DataTable11_18
       4  ??DataTable11_19
       4  ??DataTable11_2
       4  ??DataTable11_20
       4  ??DataTable11_21
       4  ??DataTable11_22
       4  ??DataTable11_23
       4  ??DataTable11_24
       4  ??DataTable11_25
       4  ??DataTable11_26
       4  ??DataTable11_27
       4  ??DataTable11_28
       4  ??DataTable11_29
       4  ??DataTable11_3
       4  ??DataTable11_30
       4  ??DataTable11_31
       4  ??DataTable11_32
       4  ??DataTable11_33
       4  ??DataTable11_34
       4  ??DataTable11_35
       4  ??DataTable11_36
       4  ??DataTable11_37
       4  ??DataTable11_38
       4  ??DataTable11_39
       4  ??DataTable11_4
       4  ??DataTable11_40
       4  ??DataTable11_41
       4  ??DataTable11_42
       4  ??DataTable11_43
       4  ??DataTable11_44
       4  ??DataTable11_45
       4  ??DataTable11_46
       4  ??DataTable11_47
       4  ??DataTable11_48
       4  ??DataTable11_49
       4  ??DataTable11_5
       4  ??DataTable11_50
       4  ??DataTable11_51
       4  ??DataTable11_52
       4  ??DataTable11_53
       4  ??DataTable11_54
       4  ??DataTable11_55
       4  ??DataTable11_56
       4  ??DataTable11_57
       4  ??DataTable11_58
       4  ??DataTable11_59
       4  ??DataTable11_6
       4  ??DataTable11_60
       4  ??DataTable11_61
       4  ??DataTable11_62
       4  ??DataTable11_63
       4  ??DataTable11_64
       4  ??DataTable11_65
       4  ??DataTable11_66
       4  ??DataTable11_67
       4  ??DataTable11_68
       4  ??DataTable11_69
       4  ??DataTable11_7
       4  ??DataTable11_8
       4  ??DataTable11_9
      20  ?_0
       8  ?_1
       8  ?_2
       2  ?_3
      50  mbedtls_md5
       6  mbedtls_md5_clone
     184  mbedtls_md5_finish
      10  mbedtls_md5_free
       8  mbedtls_md5_init
    2102  mbedtls_md5_process
     176  mbedtls_md5_self_test
      32  mbedtls_md5_starts
     116  mbedtls_md5_update
      18  mbedtls_zeroize
      64  md5_padding
     568  md5_test_buf
      28  md5_test_buflen
     112  md5_test_sum
      24  -- Other

 
     2 bytes in section .rodata
 3 814 bytes in section .text
 
 3 814 bytes of CODE  memory
     2 bytes of CONST memory

Errors: none
Warnings: none
