###############################################################################
#
# IAR ANSI C/C++ Compiler V7.80.1.11864/W32 for ARM       25/Jan/2017  17:35:14
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\common\bsp_ex\src\lp_ex_sleep.c
#    Command line =  
#        "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\common\bsp_ex\src\lp_ex_sleep.c" -D
#        MTK_LOAD_MAC_ADDR_FROM_EFUSE -D MTK_PING_OUT_ENABLE -D
#        MTK_WIFI_PROFILE_ENABLE -D PCFG_OS=2 -D _REENT_SMALL -D
#        MTK_MINISUPP_ENABLE -D MTK_MINICLI_ENABLE -D MTK_BSPEXT_ENABLE -D
#        MTK_HAL_LOWPOWER_ENABLE -D MTK_LWIP_ENABLE -D
#        MTK_HTTPCLIENT_SSL_ENABLE -D MTK_IPERF_ENABLE -D PRODUCT_VERSION=7697
#        -D MTK_WIFI_TGN_VERIFY_ENABLE -D MTK_SMTCN_ENABLE -D
#        MTK_CLI_TEST_MODE_ENABLE -D MTK_WIFI_REPEATER_ENABLE -D
#        CONFIG_REPEATER -D MTK_DEBUG_LEVEL_INFO -D MTK_DEBUG_LEVEL_WARNING -D
#        MTK_DEBUG_LEVEL_ERROR -D configOVERRIDE_DEFAULT_TICK_CONFIGURATION -D
#        CFG_SUPPORT_SMNT_PROTO=2 -D BT_DEBUG -D MTK_BLE_CLI_ENABLE -D
#        MTK_BLE_BQB_CLI_ENABLE -D MTK_HCI_CONSOLE_MIX_ENABLE -D
#        MTK_BLE_BQB_TEST_ENABLE -D MTK_BLE_SMTCN_ENABLE -D SUPPORT_MBEDTLS -D
#        MBEDTLS_CONFIG_FILE=<config-mtk-basic.h> -D MTK_NVDM_ENABLE -D
#        MTK_WIFI_PRIVILEGE_ENABLE -D MTK_MCS_ENABLE -D MTK_BLE_GPIO_SERVICE -D
#        __BT_DEBUG__ -lcN "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\out_iar\mt7697_hdk\iot_sdk_demo\Debug\List" -lA
#        "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\out_iar\mt7697_hdk\iot_sdk_demo\Debug\List"
#        --diag_suppress Pa050,Ta022,Ta023 --diag_error Pe606 -o
#        "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\out_iar\mt7697_hdk\iot_sdk_demo\Debug\Obj" --no_unroll
#        --no_inline --no_tbaa --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.5\arm\INC\c\DLib_Config_Full.h"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\inc\" -I
#        "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\kernel\service\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\kernel\rtos\FreeRTOS\Source\include\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\kernel\rtos\FreeRTOS\Source\portable\IAR\ARM_CM4F\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\kernel\rtos\FreeRTOS\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\CMSIS\Device\MTK\mt7687\Include\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\CMSIS\Include\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\chip\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\chip\mt7687\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\board\mt76x7_hdk\wifi\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\third_party\dhcpd\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\MTK\minicli\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\MTK\minisupp\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\chip\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\chip\mt7687\src\common\include\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\third_party\lwip\src\include\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\third_party\lwip\ports\include\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\third_party\lwip\src\include\lwip\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\project\common\bsp_ex\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\MTK\nvdm\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\third_party\ping\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\MTK\smtcn\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\MTK\iperf\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\project\mt7697_hdk\apps\iot_sdk_demo\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\chip\mt7687\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\board\mt76x7_hdk\util\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\board\mt76x7_hdk\wifi\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\MTK\bluetooth\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\project\mt7697_hdk\apps\iot_sdk_demo\src\ut_app\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\board\mt76x7_hdk\ept\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\third_party\mbedtls\include\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\third_party\mbedtls\configs\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\board\mt76x7_hdk\external_flash\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\third_party\httpclient\inc\"
#        -Om -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\CMSIS\Include\"
#    Locale       =  Chinese (Simplified)_CHN.936
#    List file    =  
#        C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\out_iar\mt7697_hdk\iot_sdk_demo\Debug\List\lp_ex_sleep.lst
#    Object file  =  
#        C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\out_iar\mt7697_hdk\iot_sdk_demo\Debug\Obj\lp_ex_sleep.o
#
###############################################################################

C:\LEO\myGit\MTK IOT\SDK_V4.2.0\project\common\bsp_ex\src\lp_ex_sleep.c
      1          /* Copyright Statement:
      2           *
      3           * (C) 2005-2016  MediaTek Inc. All rights reserved.
      4           *
      5           * This software/firmware and related documentation ("MediaTek Software") are
      6           * protected under relevant copyright laws. The information contained herein
      7           * is confidential and proprietary to MediaTek Inc. ("MediaTek") and/or its licensors.
      8           * Without the prior written permission of MediaTek and/or its licensors,
      9           * any reproduction, modification, use or disclosure of MediaTek Software,
     10           * and information contained herein, in whole or in part, shall be strictly prohibited.
     11           * You may only use, reproduce, modify, or distribute (as applicable) MediaTek Software
     12           * if you have agreed to and been bound by the applicable license agreement with
     13           * MediaTek ("License Agreement") and been granted explicit permission to do so within
     14           * the License Agreement ("Permitted User").  If you are not a Permitted User,
     15           * please cease any access or use of MediaTek Software immediately.
     16           * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
     17           * THAT MEDIATEK SOFTWARE RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES
     18           * ARE PROVIDED TO RECEIVER ON AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL
     19           * WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
     20           * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
     21           * NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
     22           * SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
     23           * SUPPLIED WITH MEDIATEK SOFTWARE, AND RECEIVER AGREES TO LOOK ONLY TO SUCH
     24           * THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. RECEIVER EXPRESSLY ACKNOWLEDGES
     25           * THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES
     26           * CONTAINED IN MEDIATEK SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK
     27           * SOFTWARE RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
     28           * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND
     29           * CUMULATIVE LIABILITY WITH RESPECT TO MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
     30           * AT MEDIATEK'S OPTION, TO REVISE OR REPLACE MEDIATEK SOFTWARE AT ISSUE,
     31           * OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY RECEIVER TO
     32           * MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
     33           */
     34          
     35          #include <stdlib.h>
     36          #include <stdio.h>
     37          #include <string.h>
     38          /* #include "mlog.h" */
     39          
     40          #include "hal_lp.h"
     41          #include "wifi_ex.h"
     42          
     43          #include "mt7687.h"
     44          #include "connsys_driver.h"
     45          
     46          #include "timer.h"
     47          #include "top.h"
     48          #include "system_mt7687.h"
     49          #include "hal_sleep_driver.h"
     50          #include "hal_sleep_manager.h"
     51          #include "FreeRTOS.h"
     52          #include "toi.h"
     53          #include "hal_rtc.h"
     54          
     55          #define HAL_REG_32(reg)         (*((volatile unsigned int *)(reg)))
     56          
     57          extern uint32_t hal_sleep_manager_sleep_driver_dump_handle_name(void);
     58          
     59          void hal_ex_lp_gpt_isr(void)
     60          {
     61          }
     62          
     63          
     64          static uint8_t _cli_legacy_sleep(uint8_t len, char *param[])
     65          {
     66              /* Setup timer as wakeup source */
     67              /* TMR0 is usesd by iperf */
     68              drvTMR_init(TMR1, (atoi(param[0]) * 32768), 0, hal_ex_lp_gpt_isr);//1
     69          
     70              /* disable TMR0 which trigger a 30sec timer due to tickless */
     71              TMR_Stop(TMR0);
     72          
     73              TMR_Start(TMR1);
     74          
     75              /* Enable FW_OWN_BACK_INT interrupt */
     76              hal_lp_connsys_get_own_enable_int();
     77          
     78              /* Give connsys ownership to N9 */
     79              hal_lp_connsys_give_n9_own();
     80          
     81              /* Switch flash clock to XTAL */
     82              cmnSerialFlashClkConfToXtal();
     83          
     84              /* Switch MCU clock to XTAL */
     85              cmnCpuClkConfigureToXtal();
     86          
     87              /* Unclaim PLL usage */
     88              cmnPLL1OFF_PLL2OFF();
     89          
     90              hal_lp_legacy_sleep();
     91          
     92              /* After wakeup from legacy sleep */
     93              /* Enable MCU clock to 192MHz */
     94              cmnCpuClkConfigureTo192M();
     95          
     96              /* Enable flash clock to 64MHz */
     97              cmnSerialFlashClkConfTo64M();
     98          
     99              /* re-init connsys for handling inband-cmd response */
    100              connsys_open();
    101          
    102              TMR_Start(TMR0);
    103              return 0;
    104          
    105          }
    106          
    107          #if configUSE_TICKLESS_IDLE == 2
    108          uint32_t ticklessCount = 0;
    109          uint32_t ticklessTryCount = 0;
    110          uint16_t ticklessWFICount = 0;
    111          #endif
    112          
    113          static uint8_t _cli_tickless_mode(uint8_t len, char *param[])
    114          {
    115          #ifdef HAL_SLEEP_MANAGER_ENABLED
    116          #if configUSE_TICKLESS_IDLE == 2
    117          #ifdef configTICKLESS_DYNAMIC_ENABLE
    118              int ticklessMode = 1;
    119          #endif
    120          
    121          #ifdef configTICKLESS_DYNAMIC_ENABLE
    122              ticklessMode = atoi(param[0]);
    123          
    124              switch (ticklessMode) {
    125              case 0:
    126                  sleepdrv_set_sleep_mode(HAL_SLEEP_MODE_NONE);
    127                  break;
    128              case 1:
    129                  sleepdrv_set_sleep_mode(HAL_SLEEP_MODE_SLEEP);
    130                  break;
    131              case 2:
    132                  sleepdrv_set_sleep_mode(HAL_SLEEP_MODE_LEGACY_SLEEP);
    133                  break;
    134              default:
    135                  break;
    136              }
    137          
    138              ticklessCount = 0;
    139              ticklessTryCount = 0;
    140              ticklessWFICount = 0;
    141          #endif
    142          #endif
    143          #endif
    144              return 0;
    145          }
    146          
    147          static uint8_t _cli_tickless_status(uint8_t len, char *param[])
    148          {
    149          #if configUSE_TICKLESS_IDLE == 2
    150              hal_sleep_mode_t ticklessMode = sleepdrv_get_sleep_mode();
    151          
    152              printf("tickless:\n");
    153              printf("\tentered %u times\n", (unsigned int)ticklessCount);
    154              printf("\tentered wfi %u times\n", (unsigned int)ticklessWFICount);
    155              printf("\ttried   %u times\n", (unsigned int)ticklessTryCount);
    156              printf("\t%s\n", ticklessMode ? "enabled" : "disabled");
    157              if (ticklessMode == HAL_SLEEP_MODE_SLEEP) {
    158                  printf("\tmode: WFI\n");
    159              } else if (ticklessMode == HAL_SLEEP_MODE_LEGACY_SLEEP) {
    160                  printf("\tmode: Legacy Sleep\n");
    161              }
    162              printf("\t%s\n", hal_sleep_manager_is_sleep_locked() ? "locked" : "not locked");
    163              if (hal_sleep_manager_is_sleep_locked()) {
    164                  hal_sleep_manager_sleep_driver_dump_handle_name();
    165              }
    166          #endif
    167          
    168              return 0;
    169          }
    170          
    171          static uint8_t _cli_rtc_mode(uint8_t len, char *param[])
    172          {
    173              if (HAL_RTC_STATUS_OK == hal_rtc_init()) {
    174                  printf("ready to enter RTC mode.\n");
    175                  hal_rtc_sleep(HAL_RTC_SLEEP_MAGIC);
    176              } else {
    177                  printf("RTC init fail.\n");
    178              }
    179          
    180              return 0;
    181          }
    182          
    183          cmd_t lp_cli[] = {
    184              { "ls",              "legacy sleep",                  _cli_legacy_sleep    },
    185              { "tick",            "tickless enable",               _cli_tickless_mode   },
    186              { "status",          "tickless status",               _cli_tickless_status },
    187              { "rtc",             "rtc mode",                      _cli_rtc_mode        },
    188              { NULL }
    189          };
    190          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   _cli_legacy_sleep
         8   -> TMR_Start
         8   -> TMR_Stop
         8   -> atoi
         8   -> cmnCpuClkConfigureTo192M
         8   -> cmnCpuClkConfigureToXtal
         8   -> cmnPLL1OFF_PLL2OFF
         8   -> cmnSerialFlashClkConfTo64M
         8   -> cmnSerialFlashClkConfToXtal
         8   -> connsys_open
         8   -> drvTMR_init
         8   -> hal_lp_connsys_get_own_enable_int
         8   -> hal_lp_connsys_give_n9_own
         8   -> hal_lp_legacy_sleep
       8   _cli_rtc_mode
         8   -> hal_rtc_init
         8   -> hal_rtc_sleep
         8   -> printf
       0   _cli_tickless_mode
       0   _cli_tickless_status
       0   hal_ex_lp_gpt_isr


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable11
       4  ??DataTable11_1
       4  ?_0
      16  ?_1
       8  ?_2
      16  ?_3
       8  ?_4
      16  ?_5
       4  ?_6
      12  ?_7
      28  ?_8
      16  ?_9
      78  _cli_legacy_sleep
      38  _cli_rtc_mode
       4  _cli_tickless_mode
       4  _cli_tickless_status
       2  hal_ex_lp_gpt_isr
      80  lp_cli

 
  80 bytes in section .data
  84 bytes in section .rodata
 178 bytes in section .text
 
 178 bytes of CODE  memory
  84 bytes of CONST memory
  80 bytes of DATA  memory

Errors: none
Warnings: none
