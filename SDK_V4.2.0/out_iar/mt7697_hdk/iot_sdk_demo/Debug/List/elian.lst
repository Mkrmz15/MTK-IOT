###############################################################################
#
# IAR ANSI C/C++ Compiler V7.80.1.11864/W32 for ARM       25/Jan/2017  17:34:56
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\LEO\myGit\MTK IOT\SDK_V4.2.0\middleware\MTK\smtcn\src\elian.c
#    Command line =  
#        "C:\LEO\myGit\MTK IOT\SDK_V4.2.0\middleware\MTK\smtcn\src\elian.c" -D
#        MTK_LOAD_MAC_ADDR_FROM_EFUSE -D MTK_PING_OUT_ENABLE -D
#        MTK_WIFI_PROFILE_ENABLE -D PCFG_OS=2 -D _REENT_SMALL -D
#        MTK_MINISUPP_ENABLE -D MTK_MINICLI_ENABLE -D MTK_BSPEXT_ENABLE -D
#        MTK_HAL_LOWPOWER_ENABLE -D MTK_LWIP_ENABLE -D
#        MTK_HTTPCLIENT_SSL_ENABLE -D MTK_IPERF_ENABLE -D PRODUCT_VERSION=7697
#        -D MTK_WIFI_TGN_VERIFY_ENABLE -D MTK_SMTCN_ENABLE -D
#        MTK_CLI_TEST_MODE_ENABLE -D MTK_WIFI_REPEATER_ENABLE -D
#        CONFIG_REPEATER -D MTK_DEBUG_LEVEL_INFO -D MTK_DEBUG_LEVEL_WARNING -D
#        MTK_DEBUG_LEVEL_ERROR -D configOVERRIDE_DEFAULT_TICK_CONFIGURATION -D
#        CFG_SUPPORT_SMNT_PROTO=2 -D BT_DEBUG -D MTK_BLE_CLI_ENABLE -D
#        MTK_BLE_BQB_CLI_ENABLE -D MTK_HCI_CONSOLE_MIX_ENABLE -D
#        MTK_BLE_BQB_TEST_ENABLE -D MTK_BLE_SMTCN_ENABLE -D SUPPORT_MBEDTLS -D
#        MBEDTLS_CONFIG_FILE=<config-mtk-basic.h> -D MTK_NVDM_ENABLE -D
#        MTK_WIFI_PRIVILEGE_ENABLE -D MTK_MCS_ENABLE -D MTK_BLE_GPIO_SERVICE -D
#        __BT_DEBUG__ -lcN "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\out_iar\mt7697_hdk\iot_sdk_demo\Debug\List" -lA
#        "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\out_iar\mt7697_hdk\iot_sdk_demo\Debug\List"
#        --diag_suppress Pa050,Ta022,Ta023 --diag_error Pe606 -o
#        "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\out_iar\mt7697_hdk\iot_sdk_demo\Debug\Obj" --no_unroll
#        --no_inline --no_tbaa --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.5\arm\INC\c\DLib_Config_Full.h"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\inc\" -I
#        "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\kernel\service\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\kernel\rtos\FreeRTOS\Source\include\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\kernel\rtos\FreeRTOS\Source\portable\IAR\ARM_CM4F\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\kernel\rtos\FreeRTOS\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\CMSIS\Device\MTK\mt7687\Include\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\CMSIS\Include\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\chip\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\chip\mt7687\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\board\mt76x7_hdk\wifi\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\third_party\dhcpd\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\MTK\minicli\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\MTK\minisupp\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\chip\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\chip\mt7687\src\common\include\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\third_party\lwip\src\include\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\third_party\lwip\ports\include\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\third_party\lwip\src\include\lwip\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\project\common\bsp_ex\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\MTK\nvdm\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\third_party\ping\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\MTK\smtcn\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\MTK\iperf\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\project\mt7697_hdk\apps\iot_sdk_demo\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\chip\mt7687\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\board\mt76x7_hdk\util\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\board\mt76x7_hdk\wifi\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\MTK\bluetooth\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\project\mt7697_hdk\apps\iot_sdk_demo\src\ut_app\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\board\mt76x7_hdk\ept\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\third_party\mbedtls\include\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\third_party\mbedtls\configs\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\board\mt76x7_hdk\external_flash\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\third_party\httpclient\inc\"
#        -Om -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\CMSIS\Include\"
#    Locale       =  Chinese (Simplified)_CHN.936
#    List file    =  
#        C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\out_iar\mt7697_hdk\iot_sdk_demo\Debug\List\elian.lst
#    Object file  =  
#        C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\out_iar\mt7697_hdk\iot_sdk_demo\Debug\Obj\elian.o
#
###############################################################################

C:\LEO\myGit\MTK IOT\SDK_V4.2.0\middleware\MTK\smtcn\src\elian.c
      1          /* Copyright Statement:
      2           *
      3           * (C) 2005-2016  MediaTek Inc. All rights reserved.
      4           *
      5           * This software/firmware and related documentation ("MediaTek Software") are
      6           * protected under relevant copyright laws. The information contained herein
      7           * is confidential and proprietary to MediaTek Inc. ("MediaTek") and/or its licensors.
      8           * Without the prior written permission of MediaTek and/or its licensors,
      9           * any reproduction, modification, use or disclosure of MediaTek Software,
     10           * and information contained herein, in whole or in part, shall be strictly prohibited.
     11           * You may only use, reproduce, modify, or distribute (as applicable) MediaTek Software
     12           * if you have agreed to and been bound by the applicable license agreement with
     13           * MediaTek ("License Agreement") and been granted explicit permission to do so within
     14           * the License Agreement ("Permitted User").  If you are not a Permitted User,
     15           * please cease any access or use of MediaTek Software immediately.
     16           * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
     17           * THAT MEDIATEK SOFTWARE RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES
     18           * ARE PROVIDED TO RECEIVER ON AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL
     19           * WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
     20           * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
     21           * NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
     22           * SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
     23           * SUPPLIED WITH MEDIATEK SOFTWARE, AND RECEIVER AGREES TO LOOK ONLY TO SUCH
     24           * THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. RECEIVER EXPRESSLY ACKNOWLEDGES
     25           * THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES
     26           * CONTAINED IN MEDIATEK SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK
     27           * SOFTWARE RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
     28           * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND
     29           * CUMULATIVE LIABILITY WITH RESPECT TO MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
     30           * AT MEDIATEK'S OPTION, TO REVISE OR REPLACE MEDIATEK SOFTWARE AT ISSUE,
     31           * OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY RECEIVER TO
     32           * MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
     33           */
     34          
     35          #include <stdint.h>
     36          #include <stdio.h>
     37          #include <string.h>
     38          
     39          #include "FreeRTOS.h"
     40          #include "FreeRTOSConfig.h"
     41          #include "timers.h"
     42          #include "type_def.h"
     43          //#include "cmsis_mt7687.h"
     44          //#include "crypt_aes.h"
     45          #include "hal_aes.h"
     46          #include "wifi_api.h"
     47          #include "smt_conn.h"
     48          #include "smt_core.h"
     49          #include "semphr.h"
     50          #include "syslog.h"
     51          
     52          log_create_module(elian, PRINT_LEVEL_INFO);
     53          
     54          #define elian_debug_log 1
     55          
     56          /*  *********     external reference   *********************/
     57          extern smtcn_info   saved_smtcn_info;
     58          extern smtcn_proto_ops *psmtcn_proto_ops;
     59          extern void isr_aes(void);
     60          
     61          extern void atomic_write_smtcn_flag(uint8_t);
     62          /***********************************************************/
     63          
     64          /*  *********    file variable         ******************* */
     65          static TimerHandle_t elian_rst_timer = NULL;
     66          /***********************************************************/
     67          
     68          static void elian_timeout(TimerHandle_t tmr)
     69          {
     70              struct etimer *petimer;
     71              petimer = get_etimer();
     72          
     73              petimer->func((unsigned long) tmr);
     74          }
     75          
     76          static void elian_get_info(void)
     77          {
     78              int ssid_len = WIFI_MAX_LENGTH_OF_SSID,
     79                  pwd_len = WIFI_LENGTH_PASSPHRASE,
     80                  pmk_len = WIFI_LENGTH_PMK;
     81          
     82              /*SSID*/
     83              if (elian_get(TYPE_ID_SSID, (char *)saved_smtcn_info.ssid, &ssid_len) != ESUCCESS) {
     84                  LOG_E(elian, "SSID got failed.\n");
     85                  atomic_write_smtcn_flag(SMTCN_FLAG_FAIL);
     86                  return;
     87              }
     88              saved_smtcn_info.ssid_len = ssid_len;
     89              //saved_smtcn_info.ssid[saved_smtcn_info.ssid_len] = '\0';
     90          
     91              /*password*/
     92              if (elian_get(TYPE_ID_PWD, (char *)saved_smtcn_info.pwd, &pwd_len) != ESUCCESS) {
     93                  LOG_W(elian, "Passphase got failed.\n");
     94                  pwd_len = 0;
     95              }
     96              saved_smtcn_info.pwd_len = pwd_len;
     97              //saved_smtcn_info.pwd[saved_smtcn_info.pwd_len] = '\0';
     98          
     99              /*PMK */
    100              if (elian_get(TYPE_ID_PMK, (char *)saved_smtcn_info.pmk, &pmk_len) != ESUCCESS) {
    101                  LOG_W(elian, "PMK got failed.\n");
    102              }
    103          
    104          
    105              build_cust_tlv_buf((char **)&saved_smtcn_info.tlv_data, &saved_smtcn_info.tlv_data_len);
    106          #if (elian_debug_log == 1)
    107              uint8_t ssid[WIFI_MAX_LENGTH_OF_SSID + 1] = {0};
    108              uint8_t passwd[WIFI_LENGTH_PASSPHRASE + 1] = {0};
    109          
    110              memcpy(ssid, saved_smtcn_info.ssid, saved_smtcn_info.ssid_len);
    111              memcpy(passwd, saved_smtcn_info.pwd, saved_smtcn_info.pwd_len);
    112          
    113              LOG_I(elian, "ssid:%s/%d, passwd:%s/%d\n",
    114                    ssid, saved_smtcn_info.ssid_len,
    115                    passwd, saved_smtcn_info.pwd_len);
    116          #endif
    117          
    118              atomic_write_smtcn_flag(SMTCN_FLAG_FIN);
    119          }
    120          
    121          static void proc_infoget(void)
    122          {
    123              elian_get_info();
    124              sc_rst();
    125          }
    126          
    127          static void elian_report_env(enum eevent_id evt) 
    128          {
    129              switch (evt)
    130              {
    131                  case EVT_ID_SYNCSUC:
    132                      smtcn_stop_switch();
    133                      LOG_I(elian, "sync succeed.\n");
    134                      break;
    135                  case EVT_ID_INFOGET:
    136                      proc_infoget();
    137                      break;
    138                  case EVT_ID_TIMEOUT:
    139                      LOG_W(elian, "lock channel timeout.\n");
    140                      smtcn_continue_switch();
    141                      break;
    142                  case EVT_ID_SYNFAIL:
    143                  default :
    144                      break;
    145              }
    146          }
    147          
    148          static void elian_start_timer(struct etimer *petimer)
    149          {
    150              (void) petimer;
    151              configASSERT(elian_rst_timer != NULL);
    152              xTimerStart(elian_rst_timer, tmr_nodelay);
    153          }
    154          
    155          static int elian_stop_timer(struct etimer *petimer)
    156          {
    157              //configASSERT(elian_rst_timer != NULL);
    158              xTimerStop(elian_rst_timer, tmr_nodelay);
    159          
    160              return 0;
    161          }
    162          
    163          static void elian_aes_decrypt(unsigned char *cipher_blk, uint16_t cipher_blk_size,
    164                                        unsigned char *key, uint8_t key_len,
    165                                        unsigned char *plain_blk, uint16_t *plain_blk_size)
    166          {
    167              /*
    168                  NVIC_Register(CM4_MTK_CRYPTO_IRQ, isr_aes);
    169                  NVIC_EnableIRQ(CM4_MTK_CRYPTO_IRQ);
    170                  */
    171              hal_aes_buffer_t plain_buf, cipher_buf, key_buf;
    172              plain_buf.buffer = plain_blk;
    173              plain_buf.length = *plain_blk_size;
    174              cipher_buf.buffer = cipher_blk;
    175              cipher_buf.length = cipher_blk_size;
    176              key_buf.buffer = key;
    177              key_buf.length = key_len;
    178          
    179              hal_aes_ecb_decrypt(&plain_buf, &cipher_buf, &key_buf);
    180          
    181              //NVIC_DisableIRQ(CM4_MTK_CRYPTO_IRQ);
    182              //NVIC_UnRegister(CM4_MTK_CRYPTO_IRQ);
    183          }
    184          
    185          const struct efunc_table efunc_tbl = {
    186              .report_evt     = elian_report_env,
    187              .start_timer    = elian_start_timer,
    188              .stop_timer     = elian_stop_timer,
    189              .aes128_decrypt = elian_aes_decrypt,
    190          };
    191          
    192          static int efsm_init(const unsigned char *key, const unsigned char key_length)
    193          {
    194              uint8_t addr[6] = {0};
    195          
    196              wifi_config_get_mac_address(WIFI_PORT_STA, addr);
    197              elian_init((char *)addr, &efunc_tbl, key);
    198          
    199              elian_rst_timer = xTimerCreate("elian_rst_timer",
    200                                             (locked_channel_timems / portTICK_PERIOD_MS), /*the period being used.*/
    201                                             pdFALSE,
    202                                             NULL,
    203                                             elian_timeout);
    204          
    205              if (elian_rst_timer == NULL) {
    206                  LOG_E(elian, "elian_rst_timer create fail.\n");
    207                  return -1;
    208              }
    209          
    210              return 0;
    211          }
    212          
    213          static void efsm_cleanup(void)
    214          {
    215              if (elian_rst_timer != NULL) {
    216                  xTimerDelete(elian_rst_timer, tmr_nodelay);
    217                  elian_rst_timer = NULL;
    218              }
    219          }
    220          
    221          const smtcn_proto_ops elian_proto_ops = {
    222              .init               =   efsm_init,
    223              .cleanup            =   efsm_cleanup,
    224              .switch_channel_rst =   elian_reset,
    225              .rx_handler         =   elian_input,
    226          };
    227          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   efsm_cleanup
        16   -> xTimerGenericCommand
      24   efsm_init
        24   -- Indirect call
        24   -> elian_init
        24   -> wifi_config_get_mac_address
        24   -> xTimerCreate
      32   elian_aes_decrypt
        32   -> hal_aes_ecb_decrypt
     160   elian_get_info
       160   -- Indirect call
       160   -> __aeabi_memclr4
       160   -> __aeabi_memcpy4
       160   -> atomic_write_smtcn_flag
       160   -> build_cust_tlv_buf
       160   -> elian_get
      16   elian_report_env
        16   -- Indirect call
         0   -> proc_infoget
         0   -> smtcn_continue_switch
        16   -> smtcn_stop_switch
      16   elian_start_timer
        16   -> platform_assert
        16   -> xTaskGetTickCount
        16   -> xTimerGenericCommand
       8   elian_stop_timer
         8   -> xTimerGenericCommand
       8   elian_timeout
         0   -- Indirect call
         8   -> get_etimer
       8   proc_infoget
         8   -> elian_get_info
         0   -> sc_rst


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable24
       4  ??DataTable24_1
       4  ??DataTable24_2
       8  ?_0
      20  ?_1
      68  ?_10
       8  ?_11
      16  ?_12
      32  ?_13
      24  ?_2
      20  ?_3
      36  ?_4
      68  ?_5
      28  ?_6
      16  ?_7
      24  ?_8
      24  ?_9
      32  efsm_cleanup
      94  efsm_init
      16  efunc_tbl
      36  elian_aes_decrypt
     254  elian_get_info
      16  elian_proto_ops
      80  elian_report_env
      48  elian_start_timer
      24  elian_stop_timer
      20  elian_timeout
      20  log_control_block_elian
          elian_rst_timer
      14  proc_infoget
      48  -- Other

 
  20 bytes in section .data
 136 bytes in section .rodata
 950 bytes in section .text
 
 950 bytes of CODE  memory
 136 bytes of CONST memory
  20 bytes of DATA  memory

Errors: none
Warnings: none
