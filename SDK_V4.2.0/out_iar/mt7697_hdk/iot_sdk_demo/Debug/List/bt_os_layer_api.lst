###############################################################################
#
# IAR ANSI C/C++ Compiler V7.80.1.11864/W32 for ARM       25/Jan/2017  17:34:48
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\middleware\MTK\bluetooth\src\bt_os_layer_api.c
#    Command line =  
#        "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\middleware\MTK\bluetooth\src\bt_os_layer_api.c" -D
#        MTK_LOAD_MAC_ADDR_FROM_EFUSE -D MTK_PING_OUT_ENABLE -D
#        MTK_WIFI_PROFILE_ENABLE -D PCFG_OS=2 -D _REENT_SMALL -D
#        MTK_MINISUPP_ENABLE -D MTK_MINICLI_ENABLE -D MTK_BSPEXT_ENABLE -D
#        MTK_HAL_LOWPOWER_ENABLE -D MTK_LWIP_ENABLE -D
#        MTK_HTTPCLIENT_SSL_ENABLE -D MTK_IPERF_ENABLE -D PRODUCT_VERSION=7697
#        -D MTK_WIFI_TGN_VERIFY_ENABLE -D MTK_SMTCN_ENABLE -D
#        MTK_CLI_TEST_MODE_ENABLE -D MTK_WIFI_REPEATER_ENABLE -D
#        CONFIG_REPEATER -D MTK_DEBUG_LEVEL_INFO -D MTK_DEBUG_LEVEL_WARNING -D
#        MTK_DEBUG_LEVEL_ERROR -D configOVERRIDE_DEFAULT_TICK_CONFIGURATION -D
#        CFG_SUPPORT_SMNT_PROTO=2 -D BT_DEBUG -D MTK_BLE_CLI_ENABLE -D
#        MTK_BLE_BQB_CLI_ENABLE -D MTK_HCI_CONSOLE_MIX_ENABLE -D
#        MTK_BLE_BQB_TEST_ENABLE -D MTK_BLE_SMTCN_ENABLE -D SUPPORT_MBEDTLS -D
#        MBEDTLS_CONFIG_FILE=<config-mtk-basic.h> -D MTK_NVDM_ENABLE -D
#        MTK_WIFI_PRIVILEGE_ENABLE -D MTK_MCS_ENABLE -D MTK_BLE_GPIO_SERVICE -D
#        __BT_DEBUG__ -lcN "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\out_iar\mt7697_hdk\iot_sdk_demo\Debug\List" -lA
#        "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\out_iar\mt7697_hdk\iot_sdk_demo\Debug\List"
#        --diag_suppress Pa050,Ta022,Ta023 --diag_error Pe606 -o
#        "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\out_iar\mt7697_hdk\iot_sdk_demo\Debug\Obj" --no_unroll
#        --no_inline --no_tbaa --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.5\arm\INC\c\DLib_Config_Full.h"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\inc\" -I
#        "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\kernel\service\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\kernel\rtos\FreeRTOS\Source\include\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\kernel\rtos\FreeRTOS\Source\portable\IAR\ARM_CM4F\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\kernel\rtos\FreeRTOS\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\CMSIS\Device\MTK\mt7687\Include\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\CMSIS\Include\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\chip\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\chip\mt7687\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\board\mt76x7_hdk\wifi\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\third_party\dhcpd\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\MTK\minicli\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\MTK\minisupp\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\chip\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\chip\mt7687\src\common\include\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\third_party\lwip\src\include\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\third_party\lwip\ports\include\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\third_party\lwip\src\include\lwip\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\project\common\bsp_ex\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\MTK\nvdm\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\third_party\ping\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\MTK\smtcn\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\MTK\iperf\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\project\mt7697_hdk\apps\iot_sdk_demo\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\chip\mt7687\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\board\mt76x7_hdk\util\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\board\mt76x7_hdk\wifi\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\MTK\bluetooth\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\project\mt7697_hdk\apps\iot_sdk_demo\src\ut_app\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\board\mt76x7_hdk\ept\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\third_party\mbedtls\include\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\third_party\mbedtls\configs\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\board\mt76x7_hdk\external_flash\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\third_party\httpclient\inc\"
#        -Om -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\CMSIS\Include\"
#    Locale       =  Chinese (Simplified)_CHN.936
#    List file    =  
#        C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\out_iar\mt7697_hdk\iot_sdk_demo\Debug\List\bt_os_layer_api.lst
#    Object file  =  
#        C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\out_iar\mt7697_hdk\iot_sdk_demo\Debug\Obj\bt_os_layer_api.o
#
###############################################################################

C:\LEO\myGit\MTK IOT\SDK_V4.2.0\middleware\MTK\bluetooth\src\bt_os_layer_api.c
      1          /* Copyright Statement:
      2           *
      3           * (C) 2005-2016  MediaTek Inc. All rights reserved.
      4           *
      5           * This software/firmware and related documentation ("MediaTek Software") are
      6           * protected under relevant copyright laws. The information contained herein
      7           * is confidential and proprietary to MediaTek Inc. ("MediaTek") and/or its licensors.
      8           * Without the prior written permission of MediaTek and/or its licensors,
      9           * any reproduction, modification, use or disclosure of MediaTek Software,
     10           * and information contained herein, in whole or in part, shall be strictly prohibited.
     11           * You may only use, reproduce, modify, or distribute (as applicable) MediaTek Software
     12           * if you have agreed to and been bound by the applicable license agreement with
     13           * MediaTek ("License Agreement") and been granted explicit permission to do so within
     14           * the License Agreement ("Permitted User").  If you are not a Permitted User,
     15           * please cease any access or use of MediaTek Software immediately.
     16           * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
     17           * THAT MEDIATEK SOFTWARE RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES
     18           * ARE PROVIDED TO RECEIVER ON AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL
     19           * WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
     20           * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
     21           * NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
     22           * SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
     23           * SUPPLIED WITH MEDIATEK SOFTWARE, AND RECEIVER AGREES TO LOOK ONLY TO SUCH
     24           * THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. RECEIVER EXPRESSLY ACKNOWLEDGES
     25           * THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES
     26           * CONTAINED IN MEDIATEK SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK
     27           * SOFTWARE RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
     28           * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND
     29           * CUMULATIVE LIABILITY WITH RESPECT TO MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
     30           * AT MEDIATEK'S OPTION, TO REVISE OR REPLACE MEDIATEK SOFTWARE AT ISSUE,
     31           * OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY RECEIVER TO
     32           * MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
     33           */
     34          
     35          /* Kernel includes. */
     36          #include "bt_os_layer_api.h"
     37          #include "FreeRTOS.h"
     38          #include "task.h"
     39          //#include "timer.h"
     40          #include "semphr.h"
     41          #include "portmacro.h"
     42          #include "queue.h"
     43          #include <timers.h>
     44          #include <string.h>
     45          #include "syslog.h"
     46          #include "hal_aes.h"
     47          #include "mbedtls/md5.h"
     48          #if !defined(__GNUC__)
     49          #include "mbedtls/aes.h"
     50          #endif
     51          #include "bt_debug.h"
     52          
     53          static TimerHandle_t bt_rtos_timer = NULL; /**< Timer handler. */
     54          static bt_os_layer_timer_expired_t bt_rtos_timer_cb;  /**< Timer callback function. */
     55          
     56          extern int rand(void);
     57          uint16_t bt_os_layer_generate_random(void)
     58          {
     59              return rand();
     60          }
     61          
     62          void bt_os_layer_aes_encrypt(bt_os_layer_aes_buffer_t* encrypted_data, bt_os_layer_aes_buffer_t* plain_text, bt_os_layer_aes_buffer_t* key)
     63          {
     64              #if defined(__GNUC__)
     65              BT_LOGI("BT", "bt_os_layer_aes_encrypt use hal version");
     66              hal_aes_ecb_encrypt((hal_aes_buffer_t*)encrypted_data, (hal_aes_buffer_t*)plain_text, (hal_aes_buffer_t*)key);
     67              #else
     68              mbedtls_aes_context context;
     69              mbedtls_aes_init(&context);
     70              mbedtls_aes_setkey_enc(&context, key->buffer, sizeof(bt_key_t) * 8);
     71              mbedtls_aes_crypt_ecb(&context, MBEDTLS_AES_ENCRYPT, (unsigned char *)plain_text->buffer, (unsigned char *)encrypted_data->buffer);
     72              mbedtls_aes_free(&context);
     73              BT_LOGI("BT", "bt_os_layer_aes_encrypt use mbed version");
     74              #endif
     75          }
     76          
     77          static void bt_os_layer_rtos_timer_os_expire(TimerHandle_t timer)
     78          {
     79              if(bt_rtos_timer_cb != NULL) {
     80                  bt_rtos_timer_cb();
     81              }
     82          }
     83          
     84          void bt_os_layer_init_timer(void)
     85          {
     86              if(bt_rtos_timer == NULL) {
     87                  bt_rtos_timer = xTimerCreate( "hb timer", 0xffff, pdFALSE, NULL, bt_os_layer_rtos_timer_os_expire);
     88                  bt_rtos_timer_cb = NULL;
     89              }
     90          }
     91          
     92          void bt_os_layer_deinit_timer(void)
     93          {
     94              if (bt_rtos_timer != NULL) {
     95                  xTimerDelete(bt_rtos_timer, 0);
     96                  bt_rtos_timer = NULL;
     97              }
     98          }
     99          
    100          void bt_os_layer_sleep_task(uint32_t ms)
    101          {
    102              uint32_t time_length = ms/portTICK_PERIOD_MS;
    103              if(time_length > 0) {
    104                  vTaskDelay(time_length);
    105              }
    106          }
    107          
    108          uint32_t bt_os_layer_get_current_task_id(void)
    109          {
    110              return (uint32_t)xTaskGetCurrentTaskHandle();
    111          }
    112          
    113          //MUTEX LOCK
    114          uint32_t bt_os_layer_create_mutex(void)
    115          {
    116              return (uint32_t)xSemaphoreCreateRecursiveMutex();
    117          }
    118          
    119          void bt_os_layer_take_mutex(uint32_t mutex_id)
    120          {
    121              if(xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED) {
    122                  return;
    123              }
    124              xSemaphoreTakeRecursive((SemaphoreHandle_t)mutex_id, portMAX_DELAY);
    125          }
    126          
    127          void bt_os_layer_give_mutex(uint32_t mutex_id)
    128          {
    129              if(xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED) {
    130                  return;
    131              }
    132              xSemaphoreGiveRecursive((SemaphoreHandle_t)mutex_id);
    133          }
    134          
    135          void bt_os_layer_delete_mutex(uint32_t mutex_id)
    136          {
    137              vSemaphoreDelete((SemaphoreHandle_t)mutex_id);
    138          }
    139          
    140          uint32_t bt_os_layer_create_semaphore()
    141          {
    142              return (uint32_t)xSemaphoreCreateBinary();
    143          }
    144          
    145          void bt_os_layer_take_semaphore_from_isr(uint32_t semaphore_id)
    146          {
    147              BaseType_t priorityTaskWoken;
    148              xSemaphoreTakeFromISR((SemaphoreHandle_t)semaphore_id, &priorityTaskWoken);
    149          }
    150          
    151          void bt_os_layer_take_semaphore(uint32_t semaphore_id)
    152          {
    153              xSemaphoreTake((SemaphoreHandle_t)semaphore_id, portMAX_DELAY);
    154          }
    155          
    156          void bt_os_layer_give_semaphore_from_isr(uint32_t semaphore_id)
    157          {
    158              BaseType_t priorityTaskWoken;
    159              xSemaphoreGiveFromISR((SemaphoreHandle_t)semaphore_id, &priorityTaskWoken);
    160              return;
    161          }
    162          
    163          void bt_os_layer_give_semaphore(uint32_t semaphore_id)
    164          {
    165              xSemaphoreGive((SemaphoreHandle_t)semaphore_id);
    166          }
    167          
    168          void bt_os_layer_delete_semaphore(uint32_t semaphore_id)
    169          {
    170              vSemaphoreDelete((SemaphoreHandle_t)semaphore_id);
    171          }
    172          
    173          uint32_t bt_os_layer_get_system_tick(void)
    174          {
    175              return xTaskGetTickCount();
    176          }
    177          
    178          void bt_os_layer_register_timer_callback(bt_os_layer_timer_expired_t callback)
    179          {
    180              bt_rtos_timer_cb = callback;
    181          }
    182          
    183          void bt_os_layer_start_timer(uint32_t ms)
    184          {
    185              uint32_t time_length = ms/portTICK_PERIOD_MS + 1;
    186              if (bt_rtos_timer == NULL) {
    187                  return;
    188              }
    189              if (bt_os_layer_is_timer_active() == 1) {
    190                  bt_os_layer_stop_timer();
    191              }
    192              xTimerChangePeriod(bt_rtos_timer, time_length, portMAX_DELAY);
    193              xTimerReset(bt_rtos_timer, portMAX_DELAY);
    194          }
    195          
    196          void bt_os_layer_stop_timer(void)
    197          {
    198              if  ((bt_rtos_timer != NULL) && (bt_os_layer_is_timer_active() == 1)) {
    199                  xTimerStop(bt_rtos_timer, portMAX_DELAY);
    200              }
    201          }
    202          
    203          uint32_t bt_os_layer_is_timer_active(void)
    204          {
    205              if ((bt_rtos_timer != NULL) && (xTimerIsTimerActive(bt_rtos_timer) != pdFALSE)) {
    206                  return 1;
    207              }
    208              else {
    209                  return 0;
    210              }
    211          }
    212          
    213          void bt_os_layer_disable_interrupt(void)
    214          {
    215              taskDISABLE_INTERRUPTS();
    216          }
    217          
    218          void bt_os_layer_enable_interrupt(void)
    219          {
    220              taskENABLE_INTERRUPTS();
    221          }
    222          
    223          void bt_os_layer_disable_system_sleep(void)
    224          {
    225          
    226          }
    227          
    228          void bt_os_layer_enable_system_sleep(void)
    229          {
    230          
    231          }
    232          
    233          
    234          void* bt_os_layer_memcpy(void* dest, const void* src, uint32_t size)
    235          {
    236              return memcpy(dest, src, size);                
    237          }
    238          
    239          int bt_os_layer_memcmp(const void* buf1, const void* buf2, uint32_t size)
    240          {
    241              return memcmp(buf1, buf2, size);                
    242          }
    243          
    244          void* bt_os_layer_memset(void* buf, uint8_t ch, uint32_t size)
    245          {
    246              return memset(buf, ch, size);                
    247          }
    248          
    249          void* bt_os_layer_memmove(void* dest, const void* src, uint32_t size)
    250          {
    251              return memmove(dest, src, size);                
    252          }
    253          
    254          
    255          void bt_os_layer_md5_init(bt_os_md5_context *ctx)
    256          {
    257          #ifdef MTK_MBEDTLS_CONFIG_FILE
    258              mbedtls_md5_init((mbedtls_md5_context *)ctx );
    259          #endif
    260          }
    261          
    262          void bt_os_layer_md5_free(bt_os_md5_context *ctx)
    263          {
    264          #ifdef MTK_MBEDTLS_CONFIG_FILE
    265            mbedtls_md5_free((mbedtls_md5_context *)ctx );
    266          #endif
    267          }
    268          
    269          void bt_os_layer_md5_clone(bt_os_md5_context *dst, const bt_os_md5_context *src)
    270          {
    271          #ifdef MTK_MBEDTLS_CONFIG_FILE
    272              mbedtls_md5_clone((mbedtls_md5_context *)dst, (const mbedtls_md5_context *)src );
    273          #endif
    274          }
    275          
    276          void bt_os_layer_md5_starts(bt_os_md5_context *ctx) 
    277          {
    278          #ifdef MTK_MBEDTLS_CONFIG_FILE
    279              mbedtls_md5_starts((mbedtls_md5_context *)ctx );
    280          #endif
    281          }
    282          
    283          void bt_os_layer_md5_process(bt_os_md5_context *ctx, const unsigned char data[64])
    284          {
    285          #ifdef MTK_MBEDTLS_CONFIG_FILE
    286             mbedtls_md5_process((mbedtls_md5_context *)ctx, data);
    287          #endif
    288          }
    289          
    290          void bt_os_layer_md5_update(bt_os_md5_context *ctx, const unsigned char *input, unsigned int ilen)
    291          {
    292          #ifdef MTK_MBEDTLS_CONFIG_FILE
    293              mbedtls_md5_update((mbedtls_md5_context *)ctx, input, (size_t)ilen);
    294          #endif
    295          }
    296          
    297          void bt_os_layer_md5_finish(bt_os_md5_context *ctx, unsigned char output[16])
    298          {
    299          #ifdef MTK_MBEDTLS_CONFIG_FILE
    300              mbedtls_md5_finish((mbedtls_md5_context *)ctx, output);
    301          #endif
    302          }
    303          
    304          
    305          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
     296   bt_os_layer_aes_encrypt
       296   -> bt_debug_log
       296   -> mbedtls_aes_crypt_ecb
       296   -> mbedtls_aes_free
       296   -> mbedtls_aes_init
       296   -> mbedtls_aes_setkey_enc
       0   bt_os_layer_create_mutex
         0   -> xQueueCreateMutex
       0   bt_os_layer_create_semaphore
         0   -> xQueueGenericCreate
      16   bt_os_layer_deinit_timer
        16   -> xTimerGenericCommand
       0   bt_os_layer_delete_mutex
         0   -> vQueueDelete
       0   bt_os_layer_delete_semaphore
         0   -> vQueueDelete
       0   bt_os_layer_disable_interrupt
       0   bt_os_layer_disable_system_sleep
       0   bt_os_layer_enable_interrupt
       0   bt_os_layer_enable_system_sleep
       8   bt_os_layer_generate_random
         8   -> rand
       0   bt_os_layer_get_current_task_id
         0   -> xTaskGetCurrentTaskHandle
       0   bt_os_layer_get_system_tick
         0   -> xTaskGetTickCount
       8   bt_os_layer_give_mutex
         0   -> xQueueGiveMutexRecursive
         8   -> xTaskGetSchedulerState
       0   bt_os_layer_give_semaphore
         0   -> xQueueGenericSend
       8   bt_os_layer_give_semaphore_from_isr
         8   -> xQueueGiveFromISR
      16   bt_os_layer_init_timer
        16   -> xTimerCreate
       8   bt_os_layer_is_timer_active
         8   -> xTimerIsTimerActive
       0   bt_os_layer_md5_clone
       0   bt_os_layer_md5_finish
       0   bt_os_layer_md5_free
       0   bt_os_layer_md5_init
       0   bt_os_layer_md5_process
       0   bt_os_layer_md5_starts
       0   bt_os_layer_md5_update
       0   bt_os_layer_memcmp
         0   -> memcmp
       8   bt_os_layer_memcpy
         8   -> __aeabi_memcpy
       8   bt_os_layer_memmove
         8   -> __aeabi_memmove
       8   bt_os_layer_memset
         8   -> __aeabi_memset
       0   bt_os_layer_register_timer_callback
       0   bt_os_layer_rtos_timer_os_expire
         0   -- Indirect call
       0   bt_os_layer_sleep_task
         0   -> vTaskDelay
      16   bt_os_layer_start_timer
        16   -> bt_os_layer_is_timer_active
        16   -> bt_os_layer_stop_timer
        16   -> xTaskGetTickCount
        16   -> xTimerGenericCommand
      16   bt_os_layer_stop_timer
        16   -> bt_os_layer_is_timer_active
        16   -> xTimerGenericCommand
       8   bt_os_layer_take_mutex
         0   -> xQueueTakeMutexRecursive
         8   -> xTaskGetSchedulerState
       0   bt_os_layer_take_semaphore
         0   -> xQueueGenericReceive
       8   bt_os_layer_take_semaphore_from_isr
         8   -> xQueueReceiveFromISR


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable8
       4  ??DataTable8_1
      52  ?_0
      12  ?_1
      56  bt_os_layer_aes_encrypt
       6  bt_os_layer_create_mutex
      10  bt_os_layer_create_semaphore
      32  bt_os_layer_deinit_timer
       4  bt_os_layer_delete_mutex
       4  bt_os_layer_delete_semaphore
      16  bt_os_layer_disable_interrupt
       2  bt_os_layer_disable_system_sleep
       8  bt_os_layer_enable_interrupt
       2  bt_os_layer_enable_system_sleep
      10  bt_os_layer_generate_random
       4  bt_os_layer_get_current_task_id
       4  bt_os_layer_get_system_tick
      24  bt_os_layer_give_mutex
      10  bt_os_layer_give_semaphore
      10  bt_os_layer_give_semaphore_from_isr
      40  bt_os_layer_init_timer
      26  bt_os_layer_is_timer_active
       2  bt_os_layer_md5_clone
       2  bt_os_layer_md5_finish
       2  bt_os_layer_md5_free
       2  bt_os_layer_md5_init
       2  bt_os_layer_md5_process
       2  bt_os_layer_md5_starts
       2  bt_os_layer_md5_update
       4  bt_os_layer_memcmp
      12  bt_os_layer_memcpy
      12  bt_os_layer_memmove
      20  bt_os_layer_memset
       6  bt_os_layer_register_timer_callback
      12  bt_os_layer_rtos_timer_os_expire
      10  bt_os_layer_sleep_task
      66  bt_os_layer_start_timer
      40  bt_os_layer_stop_timer
      28  bt_os_layer_take_mutex
      12  bt_os_layer_take_semaphore
      12  bt_os_layer_take_semaphore_from_isr
       8  bt_rtos_timer
          bt_rtos_timer_cb

 
   8 bytes in section .bss
 588 bytes in section .text
 
 588 bytes of CODE memory
   8 bytes of DATA memory

Errors: none
Warnings: none
