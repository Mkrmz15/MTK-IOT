###############################################################################
#
# IAR ANSI C/C++ Compiler V7.80.1.11864/W32 for ARM       25/Jan/2017  17:35:09
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\middleware\third_party\lwip\src\core\ipv4\icmp.c
#    Command line =  
#        "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\middleware\third_party\lwip\src\core\ipv4\icmp.c" -D
#        MTK_LOAD_MAC_ADDR_FROM_EFUSE -D MTK_PING_OUT_ENABLE -D
#        MTK_WIFI_PROFILE_ENABLE -D PCFG_OS=2 -D _REENT_SMALL -D
#        MTK_MINISUPP_ENABLE -D MTK_MINICLI_ENABLE -D MTK_BSPEXT_ENABLE -D
#        MTK_HAL_LOWPOWER_ENABLE -D MTK_LWIP_ENABLE -D
#        MTK_HTTPCLIENT_SSL_ENABLE -D MTK_IPERF_ENABLE -D PRODUCT_VERSION=7697
#        -D MTK_WIFI_TGN_VERIFY_ENABLE -D MTK_SMTCN_ENABLE -D
#        MTK_CLI_TEST_MODE_ENABLE -D MTK_WIFI_REPEATER_ENABLE -D
#        CONFIG_REPEATER -D MTK_DEBUG_LEVEL_INFO -D MTK_DEBUG_LEVEL_WARNING -D
#        MTK_DEBUG_LEVEL_ERROR -D configOVERRIDE_DEFAULT_TICK_CONFIGURATION -D
#        CFG_SUPPORT_SMNT_PROTO=2 -D BT_DEBUG -D MTK_BLE_CLI_ENABLE -D
#        MTK_BLE_BQB_CLI_ENABLE -D MTK_HCI_CONSOLE_MIX_ENABLE -D
#        MTK_BLE_BQB_TEST_ENABLE -D MTK_BLE_SMTCN_ENABLE -D SUPPORT_MBEDTLS -D
#        MBEDTLS_CONFIG_FILE=<config-mtk-basic.h> -D MTK_NVDM_ENABLE -D
#        MTK_WIFI_PRIVILEGE_ENABLE -D MTK_MCS_ENABLE -D MTK_BLE_GPIO_SERVICE -D
#        __BT_DEBUG__ -lcN "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\out_iar\mt7697_hdk\iot_sdk_demo\Debug\List" -lA
#        "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\out_iar\mt7697_hdk\iot_sdk_demo\Debug\List"
#        --diag_suppress Pa050,Ta022,Ta023 --diag_error Pe606 -o
#        "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\out_iar\mt7697_hdk\iot_sdk_demo\Debug\Obj" --no_unroll
#        --no_inline --no_tbaa --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.5\arm\INC\c\DLib_Config_Full.h"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\inc\" -I
#        "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\kernel\service\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\kernel\rtos\FreeRTOS\Source\include\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\kernel\rtos\FreeRTOS\Source\portable\IAR\ARM_CM4F\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\kernel\rtos\FreeRTOS\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\CMSIS\Device\MTK\mt7687\Include\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\CMSIS\Include\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\chip\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\chip\mt7687\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\board\mt76x7_hdk\wifi\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\third_party\dhcpd\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\MTK\minicli\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\MTK\minisupp\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\chip\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\chip\mt7687\src\common\include\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\third_party\lwip\src\include\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\third_party\lwip\ports\include\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\third_party\lwip\src\include\lwip\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\project\common\bsp_ex\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\MTK\nvdm\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\third_party\ping\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\MTK\smtcn\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\MTK\iperf\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\project\mt7697_hdk\apps\iot_sdk_demo\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\chip\mt7687\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\board\mt76x7_hdk\util\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\board\mt76x7_hdk\wifi\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\MTK\bluetooth\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\project\mt7697_hdk\apps\iot_sdk_demo\src\ut_app\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\board\mt76x7_hdk\ept\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\third_party\mbedtls\include\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\third_party\mbedtls\configs\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\board\mt76x7_hdk\external_flash\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\third_party\httpclient\inc\"
#        -Om -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\CMSIS\Include\"
#    Locale       =  Chinese (Simplified)_CHN.936
#    List file    =  
#        C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\out_iar\mt7697_hdk\iot_sdk_demo\Debug\List\icmp.lst
#    Object file  =  
#        C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\out_iar\mt7697_hdk\iot_sdk_demo\Debug\Obj\icmp.o
#
###############################################################################

C:\LEO\myGit\MTK IOT\SDK_V4.2.0\middleware\third_party\lwip\src\core\ipv4\icmp.c
      1          /**
      2           * @file
      3           * ICMP - Internet Control Message Protocol
      4           *
      5           */
      6          
      7          /*
      8           * Copyright (c) 2001-2004 Swedish Institute of Computer Science.
      9           * All rights reserved.
     10           *
     11           * Redistribution and use in source and binary forms, with or without modification,
     12           * are permitted provided that the following conditions are met:
     13           *
     14           * 1. Redistributions of source code must retain the above copyright notice,
     15           *    this list of conditions and the following disclaimer.
     16           * 2. Redistributions in binary form must reproduce the above copyright notice,
     17           *    this list of conditions and the following disclaimer in the documentation
     18           *    and/or other materials provided with the distribution.
     19           * 3. The name of the author may not be used to endorse or promote products
     20           *    derived from this software without specific prior written permission.
     21           *
     22           * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
     23           * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     24           * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
     25           * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
     26           * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
     27           * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
     28           * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
     29           * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
     30           * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
     31           * OF SUCH DAMAGE.
     32           *
     33           * This file is part of the lwIP TCP/IP stack.
     34           *
     35           * Author: Adam Dunkels <adam@sics.se>
     36           *
     37           */
     38          
     39          /* Some ICMP messages should be passed to the transport protocols. This
     40             is not implemented. */
     41          
     42          #include "lwip/opt.h"
     43          
     44          #if LWIP_IPV4 && LWIP_ICMP /* don't build if not configured for use in lwipopts.h */
     45          
     46          #include "lwip/icmp.h"
     47          #include "lwip/inet_chksum.h"
     48          #include "lwip/ip.h"
     49          #include "lwip/def.h"
     50          #include "lwip/stats.h"
     51          #include "lwip/snmp.h"
     52          
     53          #include <string.h>
     54          
     55          /** Small optimization: set to 0 if incoming PBUF_POOL pbuf always can be
     56           * used to modify and send a response packet (and to 1 if this is not the case,
     57           * e.g. when link header is stripped of when receiving) */
     58          #ifndef LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
     59          #define LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN 1
     60          #endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
     61          
     62          /* The amount of data from the original packet to return in a dest-unreachable */
     63          #define ICMP_DEST_UNREACH_DATASIZE 8
     64          
     65          static void icmp_send_response(struct pbuf *p, u8_t type, u8_t code);
     66          
     67          /**
     68           * Processes ICMP input packets, called from ip_input().
     69           *
     70           * Currently only processes icmp echo requests and sends
     71           * out the echo response.
     72           *
     73           * @param p the icmp echo request packet, p->payload pointing to the icmp header
     74           * @param inp the netif on which this packet was received
     75           */
     76          void
     77          icmp_input(struct pbuf *p, struct netif *inp)
     78          {
     79            u8_t type;
     80          #ifdef LWIP_DEBUG
     81            u8_t code;
     82          #endif /* LWIP_DEBUG */
     83            struct icmp_echo_hdr *iecho;
     84            const struct ip_hdr *iphdr_in;
     85            struct ip_hdr *iphdr;
     86            s16_t hlen;
     87            ip4_addr_t* src;
     88          
     89            ICMP_STATS_INC(icmp.recv);
     90            snmp_inc_icmpinmsgs();
     91          
     92            iphdr_in = ip4_current_header();
     93            hlen = IPH_HL(iphdr_in) * 4;
     94            if (p->len < sizeof(u16_t)*2) {
     95              LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
     96              goto lenerr;
     97            }
     98          
     99            type = *((u8_t *)p->payload);
    100          #ifdef LWIP_DEBUG
    101            code = *(((u8_t *)p->payload)+1);
    102          #endif /* LWIP_DEBUG */
    103            switch (type) {
    104            case ICMP_ER:
    105              /* This is OK, echo reply might have been parsed by a raw PCB
    106                 (as obviously, an echo request has been sent, too). */
    107              break; 
    108            case ICMP_ECHO:
    109              src = ip4_current_dest_addr();
    110              /* multicast destination address? */
    111              if (ip_addr_ismulticast(ip_current_dest_addr())) {
    112          #if LWIP_MULTICAST_PING
    113                /* For multicast, use address of receiving interface as source address */
    114                src = &inp->ip_addr;
    115          #else /* LWIP_MULTICAST_PING */
    116                LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
    117                goto icmperr;
    118          #endif /* LWIP_MULTICAST_PING */
    119              }
    120              /* broadcast destination address? */
    121              if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif())) {
    122          #if LWIP_BROADCAST_PING
    123                /* For broadcast, use address of receiving interface as source address */
    124                src = &inp->ip_addr;
    125          #else /* LWIP_BROADCAST_PING */
    126                LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
    127                goto icmperr;
    128          #endif /* LWIP_BROADCAST_PING */
    129              }
    130              LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    131              if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
    132                LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
    133                goto lenerr;
    134              }
    135          #if CHECKSUM_CHECK_ICMP
    136              if (inet_chksum_pbuf(p) != 0) {
    137                LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
    138                pbuf_free(p);
    139                ICMP_STATS_INC(icmp.chkerr);
    140                snmp_inc_icmpinerrors();
    141                return;
    142              }
    143          #endif
    144          #if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    145              if (pbuf_header(p, (PBUF_IP_HLEN + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
    146                /* p is not big enough to contain link headers
    147                 * allocate a new one and copy p into it
    148                 */
    149                struct pbuf *r;
    150                /* allocate new packet buffer with space for link headers */
    151                r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
    152                if (r == NULL) {
    153                  LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
    154                  goto icmperr;
    155                }
    156                LWIP_ASSERT("check that first pbuf can hold struct the ICMP header",
    157                            (r->len >= hlen + sizeof(struct icmp_echo_hdr)));
    158                /* copy the ip header */
    159                MEMCPY(r->payload, iphdr_in, hlen);
    160                iphdr = (struct ip_hdr *)r->payload;
    161                /* switch r->payload back to icmp header */
    162                if (pbuf_header(r, -hlen)) {
    163                  LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
    164                  pbuf_free(r);
    165                  goto icmperr;
    166                }
    167                /* copy the rest of the packet without ip header */
    168                if (pbuf_copy(r, p) != ERR_OK) {
    169                  LWIP_ASSERT("icmp_input: copying to new pbuf failed\n", 0);
    170                  pbuf_free(r);
    171                  goto icmperr;
    172                }
    173                /* free the original p */
    174                pbuf_free(p);
    175                /* we now have an identical copy of p that has room for link headers */
    176                p = r;
    177              } else {
    178                /* restore p->payload to point to icmp header */
    179                if (pbuf_header(p, -(s16_t)(PBUF_IP_HLEN + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
    180                  LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
    181                  goto icmperr;
    182                }
    183              }
    184          #endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    185              /* At this point, all checks are OK. */
    186              /* We generate an answer by switching the dest and src ip addresses,
    187               * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    188              iecho = (struct icmp_echo_hdr *)p->payload;
    189              if(pbuf_header(p, hlen)) {
    190                LWIP_ASSERT("Can't move over header in packet", 0);
    191              } else {
    192                err_t ret;
    193                iphdr = (struct ip_hdr*)p->payload;
    194                ip4_addr_copy(iphdr->src, *src);
    195                ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
    196                ICMPH_TYPE_SET(iecho, ICMP_ER);
    197          #if CHECKSUM_GEN_ICMP
    198                /* adjust the checksum */
    199                if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
    200                  iecho->chksum += PP_HTONS(ICMP_ECHO << 8) + 1;
    201                } else {
    202                  iecho->chksum += PP_HTONS(ICMP_ECHO << 8);
    203                }
    204          #else /* CHECKSUM_GEN_ICMP */
    205                iecho->chksum = 0;
    206          #endif /* CHECKSUM_GEN_ICMP */
    207          
    208                /* Set the correct TTL and recalculate the header checksum. */
    209                IPH_TTL_SET(iphdr, ICMP_TTL);
    210                IPH_CHKSUM_SET(iphdr, 0);
    211          #if CHECKSUM_GEN_IP
    212                IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
    213          #endif /* CHECKSUM_GEN_IP */
    214          
    215                ICMP_STATS_INC(icmp.xmit);
    216                /* increase number of messages attempted to send */
    217                snmp_inc_icmpoutmsgs();
    218                /* increase number of echo replies attempted to send */
    219                snmp_inc_icmpoutechoreps();
    220          
    221                /* send an ICMP packet */
    222                ret = ip4_output_if(p, src, IP_HDRINCL,
    223                             ICMP_TTL, 0, IP_PROTO_ICMP, inp);
    224                if (ret != ERR_OK) {
    225                  LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %c.\n", ret));
    226                }
    227              }
    228              break;
    229            default:
    230              LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n", 
    231                          (s16_t)type, (s16_t)code));
    232              ICMP_STATS_INC(icmp.proterr);
    233              ICMP_STATS_INC(icmp.drop);
    234            }
    235            pbuf_free(p);
    236            return;
    237          lenerr:
    238            pbuf_free(p);
    239            ICMP_STATS_INC(icmp.lenerr);
    240            snmp_inc_icmpinerrors();
    241            return;
    242          #if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
    243          icmperr:
    244            pbuf_free(p);
    245            ICMP_STATS_INC(icmp.err);
    246            snmp_inc_icmpinerrors();
    247            return;
    248          #endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
    249          }
    250          
    251          /**
    252           * Send an icmp 'destination unreachable' packet, called from ip_input() if
    253           * the transport layer protocol is unknown and from udp_input() if the local
    254           * port is not bound.
    255           *
    256           * @param p the input packet for which the 'unreachable' should be sent,
    257           *          p->payload pointing to the IP header
    258           * @param t type of the 'unreachable' packet
    259           */
    260          void
    261          icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
    262          {
    263            icmp_send_response(p, ICMP_DUR, t);
    264          }
    265          
    266          #if IP_FORWARD || IP_REASSEMBLY
    267          /**
    268           * Send a 'time exceeded' packet, called from ip_forward() if TTL is 0.
    269           *
    270           * @param p the input packet for which the 'time exceeded' should be sent,
    271           *          p->payload pointing to the IP header
    272           * @param t type of the 'time exceeded' packet
    273           */
    274          void
    275          icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
    276          {
    277            icmp_send_response(p, ICMP_TE, t);
    278          }
    279          
    280          #endif /* IP_FORWARD || IP_REASSEMBLY */
    281          
    282          /**
    283           * Send an icmp packet in response to an incoming packet.
    284           *
    285           * @param p the input packet for which the 'unreachable' should be sent,
    286           *          p->payload pointing to the IP header
    287           * @param type Type of the ICMP header
    288           * @param code Code of the ICMP header
    289           */
    290          static void
    291          icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
    292          {
    293            struct pbuf *q;
    294            struct ip_hdr *iphdr;
    295            /* we can use the echo header here */
    296            struct icmp_echo_hdr *icmphdr;
    297            ip4_addr_t iphdr_src;
    298          
    299            /* ICMP header + IP header + 8 bytes of data */
    300            q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
    301                           PBUF_RAM);
    302            if (q == NULL) {
    303              LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    304              return;
    305            }
    306            LWIP_ASSERT("check that first pbuf can hold icmp message",
    307                       (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));
    308          
    309            iphdr = (struct ip_hdr *)p->payload;
    310            LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded from "));
    311            ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
    312            LWIP_DEBUGF(ICMP_DEBUG, (" to "));
    313            ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
    314            LWIP_DEBUGF(ICMP_DEBUG, ("\n"));
    315          
    316            icmphdr = (struct icmp_echo_hdr *)q->payload;
    317            icmphdr->type = type;
    318            icmphdr->code = code;
    319            icmphdr->id = 0;
    320            icmphdr->seqno = 0;
    321          
    322            /* copy fields from original packet */
    323            SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
    324                    IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);
    325          
    326            /* calculate checksum */
    327            icmphdr->chksum = 0;
    328          #if CHECKSUM_GEN_ICMP
    329            icmphdr->chksum = inet_chksum(icmphdr, q->len);
    330          #endif
    331            ICMP_STATS_INC(icmp.xmit);
    332            /* increase number of messages attempted to send */
    333            snmp_inc_icmpoutmsgs();
    334            /* increase number of destination unreachable messages attempted to send */
    335            snmp_inc_icmpouttimeexcds();
    336            ip4_addr_copy(iphdr_src, iphdr->src);
    337            ip4_output(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP);
    338            pbuf_free(q);
    339          }
    340          
    341          #endif /* LWIP_IPV4 && LWIP_ICMP */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   icmp_dest_unreach
         0   -> icmp_send_response
      48   icmp_input
        48   -> __aeabi_memcpy
        48   -> inet_chksum
        48   -> inet_chksum_pbuf
        48   -> ip4_addr_isbroadcast_u32
        48   -> ip4_output_if
        48   -> pbuf_alloc
        48   -> pbuf_copy
         0   -> pbuf_free
        48   -> pbuf_free
        48   -> pbuf_header
        48   -> printf
      40   icmp_send_response
        40   -> __aeabi_memcpy
        40   -> inet_chksum
        40   -> ip4_output
        40   -> pbuf_alloc
        40   -> pbuf_free
        40   -> printf
       0   icmp_time_exceeded
         0   -> icmp_send_response


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable9
       4  ??DataTable9_1
       4  ??DataTable9_2
      40  ?_0
      56  ?_1
      84  ?_2
      56  ?_3
      40  ?_4
      52  ?_5
      36  ?_6
      44  ?_7
       6  icmp_dest_unreach
     502  icmp_input
     140  icmp_send_response
       4  icmp_time_exceeded

 
 1 072 bytes in section .text
 
 1 072 bytes of CODE memory

Errors: none
Warnings: 4
