###############################################################################
#
# IAR ANSI C/C++ Compiler V7.80.1.11864/W32 for ARM       25/Jan/2017  17:34:47
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\src\ut_app\bt_gattc_connect.c
#    Command line =  
#        "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\src\ut_app\bt_gattc_connect.c"
#        -D MTK_LOAD_MAC_ADDR_FROM_EFUSE -D MTK_PING_OUT_ENABLE -D
#        MTK_WIFI_PROFILE_ENABLE -D PCFG_OS=2 -D _REENT_SMALL -D
#        MTK_MINISUPP_ENABLE -D MTK_MINICLI_ENABLE -D MTK_BSPEXT_ENABLE -D
#        MTK_HAL_LOWPOWER_ENABLE -D MTK_LWIP_ENABLE -D
#        MTK_HTTPCLIENT_SSL_ENABLE -D MTK_IPERF_ENABLE -D PRODUCT_VERSION=7697
#        -D MTK_WIFI_TGN_VERIFY_ENABLE -D MTK_SMTCN_ENABLE -D
#        MTK_CLI_TEST_MODE_ENABLE -D MTK_WIFI_REPEATER_ENABLE -D
#        CONFIG_REPEATER -D MTK_DEBUG_LEVEL_INFO -D MTK_DEBUG_LEVEL_WARNING -D
#        MTK_DEBUG_LEVEL_ERROR -D configOVERRIDE_DEFAULT_TICK_CONFIGURATION -D
#        CFG_SUPPORT_SMNT_PROTO=2 -D BT_DEBUG -D MTK_BLE_CLI_ENABLE -D
#        MTK_BLE_BQB_CLI_ENABLE -D MTK_HCI_CONSOLE_MIX_ENABLE -D
#        MTK_BLE_BQB_TEST_ENABLE -D MTK_BLE_SMTCN_ENABLE -D SUPPORT_MBEDTLS -D
#        MBEDTLS_CONFIG_FILE=<config-mtk-basic.h> -D MTK_NVDM_ENABLE -D
#        MTK_WIFI_PRIVILEGE_ENABLE -D MTK_MCS_ENABLE -D MTK_BLE_GPIO_SERVICE -D
#        __BT_DEBUG__ -lcN "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\out_iar\mt7697_hdk\iot_sdk_demo\Debug\List" -lA
#        "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\out_iar\mt7697_hdk\iot_sdk_demo\Debug\List"
#        --diag_suppress Pa050,Ta022,Ta023 --diag_error Pe606 -o
#        "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\out_iar\mt7697_hdk\iot_sdk_demo\Debug\Obj" --no_unroll
#        --no_inline --no_tbaa --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.5\arm\INC\c\DLib_Config_Full.h"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\inc\" -I
#        "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\kernel\service\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\kernel\rtos\FreeRTOS\Source\include\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\kernel\rtos\FreeRTOS\Source\portable\IAR\ARM_CM4F\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\kernel\rtos\FreeRTOS\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\CMSIS\Device\MTK\mt7687\Include\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\CMSIS\Include\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\chip\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\chip\mt7687\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\board\mt76x7_hdk\wifi\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\third_party\dhcpd\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\MTK\minicli\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\MTK\minisupp\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\chip\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\chip\mt7687\src\common\include\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\third_party\lwip\src\include\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\third_party\lwip\ports\include\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\third_party\lwip\src\include\lwip\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\project\common\bsp_ex\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\MTK\nvdm\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\third_party\ping\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\MTK\smtcn\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\MTK\iperf\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\project\mt7697_hdk\apps\iot_sdk_demo\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\chip\mt7687\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\board\mt76x7_hdk\util\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\board\mt76x7_hdk\wifi\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\MTK\bluetooth\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\project\mt7697_hdk\apps\iot_sdk_demo\src\ut_app\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\board\mt76x7_hdk\ept\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\third_party\mbedtls\include\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\third_party\mbedtls\configs\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\driver\board\mt76x7_hdk\external_flash\inc\"
#        -I "C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\EWARM\..\..\..\..\..\middleware\third_party\httpclient\inc\"
#        -Om -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\CMSIS\Include\"
#    Locale       =  Chinese (Simplified)_CHN.936
#    List file    =  
#        C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\out_iar\mt7697_hdk\iot_sdk_demo\Debug\List\bt_gattc_connect.lst
#    Object file  =  
#        C:\LEO\myGit\MTK
#        IOT\SDK_V4.2.0\out_iar\mt7697_hdk\iot_sdk_demo\Debug\Obj\bt_gattc_connect.o
#
###############################################################################

C:\LEO\myGit\MTK IOT\SDK_V4.2.0\project\mt7697_hdk\apps\iot_sdk_demo\src\ut_app\bt_gattc_connect.c
      1          /* Copyright Statement:
      2           *
      3           * (C) 2005-2016  MediaTek Inc. All rights reserved.
      4           *
      5           * This software/firmware and related documentation ("MediaTek Software") are
      6           * protected under relevant copyright laws. The information contained herein
      7           * is confidential and proprietary to MediaTek Inc. ("MediaTek") and/or its licensors.
      8           * Without the prior written permission of MediaTek and/or its licensors,
      9           * any reproduction, modification, use or disclosure of MediaTek Software,
     10           * and information contained herein, in whole or in part, shall be strictly prohibited.
     11           * You may only use, reproduce, modify, or distribute (as applicable) MediaTek Software
     12           * if you have agreed to and been bound by the applicable license agreement with
     13           * MediaTek ("License Agreement") and been granted explicit permission to do so within
     14           * the License Agreement ("Permitted User").  If you are not a Permitted User,
     15           * please cease any access or use of MediaTek Software immediately.
     16           * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
     17           * THAT MEDIATEK SOFTWARE RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES
     18           * ARE PROVIDED TO RECEIVER ON AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL
     19           * WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
     20           * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
     21           * NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
     22           * SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
     23           * SUPPLIED WITH MEDIATEK SOFTWARE, AND RECEIVER AGREES TO LOOK ONLY TO SUCH
     24           * THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. RECEIVER EXPRESSLY ACKNOWLEDGES
     25           * THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES
     26           * CONTAINED IN MEDIATEK SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK
     27           * SOFTWARE RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
     28           * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND
     29           * CUMULATIVE LIABILITY WITH RESPECT TO MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
     30           * AT MEDIATEK'S OPTION, TO REVISE OR REPLACE MEDIATEK SOFTWARE AT ISSUE,
     31           * OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY RECEIVER TO
     32           * MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
     33           */
     34          
     35          #include "bt_debug.h"
     36          #include "bt_gap_le.h"
     37          #include "bt_gattc_connect.h"
     38          #include "bt_gattc_srv.h"
     39          #include "connection_info.h"
     40          #include "hrc.h"
     41          #include <stdlib.h>
     42          #include "gatt_service.h"
     43          
     44          extern bt_hci_cmd_le_set_advertising_parameters_t adv_para; //MTK_BLE_GPIO_SERVICE
     45          
     46          #if 0 //MTK_BLE_GPIO_SERVICE
     47          static bt_gap_le_local_config_req_ind_t g_hr_app_local_config;
     48          
     49          bt_gap_le_local_key_t hr_local_key_req= {
     50              .encryption_info = {{0}},
     51              .master_id = {0},
     52              .identity_info = {{0x12,0x34,0x56,0x78,0x9a,0xbc,0xde,0xf0,0x19,0x28,0x55,0x33,0x68,0x33,0x56,0xde}},
     53              .signing_info = {{0}}
     54          };
     55          
     56          bt_gap_le_smp_pairing_config_t hr_pairing_config_req = {//mitm, bond, oob
     57              .maximum_encryption_key_size = 16,
     58              .io_capability = BT_GAP_LE_SMP_NO_INPUT_NO_OUTPUT,
     59              .auth_req = BT_GAP_LE_SMP_AUTH_REQ_BONDING,
     60              .oob_data_flag = BT_GAP_LE_SMP_OOB_DATA_NOT_PRESENTED,
     61              .initiator_key_distribution = BT_GAP_LE_SMP_KEY_DISTRIBUTE_ENCKEY | BT_GAP_LE_SMP_KEY_DISTRIBUTE_IDKEY | BT_GAP_LE_SMP_KEY_DISTRIBUTE_SIGN,
     62              .responder_key_distribution = BT_GAP_LE_SMP_KEY_DISTRIBUTE_ENCKEY | BT_GAP_LE_SMP_KEY_DISTRIBUTE_IDKEY | BT_GAP_LE_SMP_KEY_DISTRIBUTE_SIGN,
     63          };
     64          
     65          bool hr_sc_only= false;
     66          
     67          #endif
     68          
     69          //void gattc_connect_cb(bt_status_t status, app_bt_connection_cb_t *param);
     70          
     71          static gattc_conn_t *gattc_create_conn(app_bt_connection_cb_t *conn_info);
     72          
     73          static bt_status_t gattc_set_adv(void);
     74          
     75          static void copy_str_to_addr(uint8_t *addr, const char *str);
     76          
     77          //void gattc_disconnect_cb(bt_status_t status, bt_hci_evt_disconnect_complete_t *param);
     78          
     79          
     80          static void copy_str_to_addr(uint8_t *addr, const char *str)
     81          {
     82              unsigned int value;
     83              int using_long_format = 0;
     84              int using_hex_sign = 0;
     85          
     86              if (str[2] == ':' || str[2] == '-') {
     87                  using_long_format = 1;
     88              }
     89          
     90              if (str[1] == 'x') {
     91                  using_hex_sign = 2;
     92              }
     93          
     94              for (int i = 0; i < 6; i++) {
     95                  sscanf(str + using_hex_sign + i * (2 + using_long_format), "%02x", &value);
     96                  addr[5 - i] = (uint8_t) value;
     97              }
     98          }
     99          
    100          
    101          //bt_status_t bt_hr_io_callback(void *input, void *output)
    102          bt_status_t bt_hr_io_callback(uint8_t *cmd)
    103          {
    104              uint8_t len;
    105              bt_status_t status = BT_STATUS_FAIL;
    106              //const char *cmd = input;
    107              len = strlen((const char *)cmd);
    108              BT_LOGI("GATTC", "bt_hr_io_callback: -- start: cmd[0] = %c, len = %d\r\n", cmd[0], len);
    109              //clear_bonded_info();
    110              #if 0
    111              if (UT_APP_CMP("bt hr c")) {
    112                  BT_LOGI("GATTC", "gattc_start_connect: -- start\r\n");
    113                  if (len <= 2) {
    114                      BT_LOGI("GATTC", "please help to check BT address is ok\r\n");
    115                      return status;
    116                  }
    117                  uint8_t addr[6], peer_type;
    118                  peer_type = (uint8_t)strtoul(cmd + strlen("bt hr c "), NULL, 10);
    119                  BT_LOGI("GATTC", "connect: peer_type = %d", peer_type);
    120                  const char *addr_str = cmd + strlen("bt hr c ") + 2;
    121                  copy_str_to_addr(addr, addr_str);        
    122                  BT_LOGI("GATTC", "connect: addr-- start: addr[0] = %04x, addr[1] = %04x,addr[2] = %04x,addr[3] = %04x,addr[4] = %04x,addr[5] =  %x04x\r\n",
    123                          addr[0], addr[1], addr[2], addr[3], addr[4], addr[5]);
    124                  status = bt_gattc_connect(addr, peer_type);
    125              } else if (UT_APP_CMP("bt hr d")) {
    126                  BT_LOGI("GATTC", "gattc_start_disconnect: -- start\r\n" );
    127                  const char *handle = cmd + strlen("d ");
    128                  uint16_t connection_handle = (uint16_t)strtoul(handle, NULL, 16);
    129                  BT_LOGI("GATTC", "gattc_start_disconnect: handle = %x\r\n", connection_handle);
    130          
    131                  app_bt_connection_cb_t *cb = find_conneciton_info_by_handle(connection_handle);
    132                  if (cb != NULL) {
    133                      status = bt_gattc_disconnect(connection_handle);
    134                  } else {
    135                      BT_LOGI("GATTC", "gattc_start_disconnect: connection handle no exist");
    136                  }
    137              } else if (UT_APP_CMP("po")) {
    138                  status = bt_power_on(NULL, NULL);
    139                  bt_gatts_set_max_mtu(128); /* This value should consider with MM Tx/Rx buffer size. */
    140              } else if (UT_APP_CMP("bt hr f")) {
    141          
    142                  status = bt_power_off();
    143          
    144              } else if (UT_APP_CMP("bt hr e")) {
    145                  bt_hci_cmd_le_set_scan_enable_t disenable;
    146                  disenable.le_scan_enable = BT_HCI_DISABLE;
    147                  disenable.filter_duplicates = BT_HCI_DISABLE;
    148                  status = bt_gap_le_set_scan(&disenable, NULL);
    149              } else if (UT_APP_CMP("bt hr s")) {
    150              bt_hci_cmd_le_set_scan_enable_t enable;
    151                  enable.le_scan_enable = BT_HCI_ENABLE;
    152                  enable.filter_duplicates = BT_HCI_ENABLE;
    153                  status = bt_gattc_set_scan(&enable);
    154              } else if (UT_APP_CMP("bt hr a")) {
    155                  status = gattc_set_adv();
    156              }
    157              #endif
    158                  if (cmd[0] == 'c') {
    159                  BT_LOGI("GATTC", "gattc_start_connect: -- start\r\n");
    160                  if (len <= 2) {
    161                      BT_LOGI("GATTC", "please help to check BT address is ok\r\n");
    162                      return status;
    163                  }
    164                  uint8_t addr[6], peer_type;
    165                  peer_type = (uint8_t)strtoul((const char*)cmd + strlen("c "), NULL, 10);
    166                  BT_LOGI("GATTC", "connect: peer_type = %d", peer_type);
    167                  const char *addr_str = (const char*)cmd + strlen("c ") + 2;
    168                  copy_str_to_addr(addr, addr_str);        
    169                  BT_LOGI("GATTC", "connect: addr-- start: addr[0] = %04x, addr[1] = %04x,addr[2] = %04x,addr[3] = %04x,addr[4] = %04x,addr[5] =  %x04x\r\n",
    170                          addr[0], addr[1], addr[2], addr[3], addr[4], addr[5]);
    171                  status = bt_gattc_connect(addr, peer_type);
    172              } else if (cmd[0] == 'd') {
    173                  BT_LOGI("GATTC", "gattc_start_disconnect: -- start\r\n" );
    174                  const char *handle = (const char*)cmd + strlen((const char*)("d "));
    175                  uint16_t connection_handle = (uint16_t)strtoul(handle, NULL, 16);
    176                  BT_LOGI("GATTC", "gattc_start_disconnect: handle = %x\r\n", connection_handle);
    177          
    178                  app_bt_connection_cb_t *cb = find_conneciton_info_by_handle(connection_handle);
    179                  if (cb != NULL) {
    180                      status = bt_gattc_disconnect(connection_handle);
    181                  } else {
    182                      BT_LOGI("GATTC", "gattc_start_disconnect: connection handle no exist");
    183                  }
    184              } else if (cmd[0] == 'f') {
    185          
    186                  status = bt_power_off();
    187          
    188              } else if (cmd[0] == 'e') {
    189                  bt_hci_cmd_le_set_scan_enable_t disenable;
    190                  disenable.le_scan_enable = BT_HCI_DISABLE;
    191                  disenable.filter_duplicates = BT_HCI_DISABLE;
    192                  status = bt_gap_le_set_scan(&disenable, NULL);
    193              } else if (cmd[0] == 's') {
    194                  bt_hci_cmd_le_set_scan_enable_t enable;
    195                  enable.le_scan_enable = BT_HCI_ENABLE;
    196                  enable.filter_duplicates = BT_HCI_ENABLE;
    197                  status = bt_gattc_set_scan(&enable);
    198              } else if (cmd[0] == 'a') {
    199                  status = gattc_set_adv();
    200              }
    201              return status;
    202          }
    203          
    204          #if 0 //MTK_BLE_GPIO_SERVICE
    205          bt_hci_cmd_le_set_advertising_parameters_t adv_para = {
    206              .advertising_interval_min = 0x0800,
    207              .advertising_interval_max = 0x0800,
    208              .advertising_type = BT_HCI_ADV_TYPE_CONNECTABLE_UNDIRECTED,
    209              .advertising_channel_map = 7,
    210              .advertising_filter_policy = 0
    211          };
    212          #endif
    213          
    214          static bt_status_t gattc_set_adv(void)
    215          {
    216              bt_hci_cmd_le_set_advertising_enable_t enable;
    217              bt_hci_cmd_le_set_advertising_data_t adv_data = {
    218                  .advertising_data_length = 31,
    219                  .advertising_data = "DDDDDHR_ADV_DATA",
    220              };
    221          
    222          	char gatts_device_name[256] = { "MTKHB" };
    223          
    224          	//extern char gatts_device_name[256];
    225          
    226          
    227              memset(gatts_device_name, 0x00, sizeof(gatts_device_name));
    228              memcpy(gatts_device_name, &adv_data.advertising_data[5], 2);
    229              adv_data.advertising_data[0] = 2; //adv_length
    230              adv_data.advertising_data[1] = BT_GAP_LE_AD_TYPE_FLAG;
    231              adv_data.advertising_data[2] = BT_GAP_LE_AD_FLAG_BR_EDR_NOT_SUPPORTED | BT_GAP_LE_AD_FLAG_GENERAL_DISCOVERABLE;
    232              adv_data.advertising_data[3] = 21; //adv_length
    233              adv_data.advertising_data[4] = 0x09;
    234              enable.advertising_enable = BT_HCI_ENABLE;
    235          	
    236             return bt_gap_le_set_advertising(&enable, &adv_para, &adv_data, NULL);
    237          }
    238          
    239          #if 0 //MTK_BLE_GPIO_SERVICE
    240          
    241          bt_status_t bt_app_event_callback(bt_msg_type_t msg, bt_status_t status, void *buff)
    242          {
    243              BT_LOGI("GATTC", "bt_app_event_callback msg :  =%x" , msg);
    244              //bt_msg_type_t msg_id = msg;
    245              switch (msg) {
    246                  /* GAP */
    247                  case BT_POWER_ON_CNF: {
    248                          BT_LOGI("GATTC", "BT_GAP_POWER_ON_CNF %s",
    249                                  (status == BT_STATUS_SUCCESS) ? "Success" : "Failed");
    250          
    251                          //gattc_set_adv();
    252                          gattc_service_init();
    253                          heart_rate_init();
    254                      }
    255                      break;
    256                  case BT_GAP_LE_SET_ADVERTISING_CNF: {
    257                      BT_LOGI("GATTC", "BT_GAP_SET_ADVERTISING_CNF %s",
    258                              (status == BT_STATUS_SUCCESS) ? "Success" : "Failed");
    259                      BT_LOGI("GATTC", "bt_app_event_callback:adv cnf");
    260                      }
    261                      break;
    262                  case BT_GAP_LE_ADVERTISING_REPORT_IND:{
    263                      BT_LOGI("GATTC", "BT_GAP_ADVERTISING_REPORT_IND %s",
    264                              (status == BT_STATUS_SUCCESS) ? "Success" : "Failed");
    265                      gattc_notify_scan_info_to_all_user((bt_gap_le_advertising_report_ind_t *)buff);
    266          
    267                      }
    268                  break;
    269                  case BT_GAP_LE_CONNECT_IND:
    270                  {
    271                      BT_LOGI("GATTC", "BT_GAP_CONNECT_IND %s",
    272                              (status == BT_STATUS_SUCCESS) ? "Success" : "Failed");
    273          
    274                      bt_handle_t handle;
    275                      app_bt_connection_cb_t *conn_info = NULL;
    276                      const bt_gap_le_connection_ind_t *connect_ind = (bt_gap_le_connection_ind_t *)buff;
    277                      if (connect_ind == NULL) {
    278                          BT_LOGI("GATTC", "connection ind is null\r\n");
    279                          return status;
    280                      }
    281                      handle = connect_ind->connection_handle;
    282                      BT_LOGI("GATTC", "connection handle=0x%04x", handle);
    283                      BT_LOGI("GATTC", "role=%s", (connect_ind->role == BT_ROLE_MASTER) ? "Master" : "Slave");
    284                      BT_LOGI("GATTC", "peer address:%s (%s)\r\n ", bt_debug_bd_addr2str(connect_ind->peer_addr.addr),
    285                              connect_ind->peer_addr.type ? "Random Device Address" : "Public Device Address");
    286          
    287                      if (status == BT_STATUS_SUCCESS) {
    288                          add_connection_info(buff);
    289          
    290                          BT_LOGI("GATTC", "connection role=0x%04x", connect_ind->role);
    291                          if (connect_ind->role == BT_ROLE_MASTER) {
    292                              conn_info = find_conneciton_info_by_handle(handle);
    293                              gattc_connect_cb(status, conn_info);
    294                          }
    295                      }
    296                  }
    297                      break;
    298                  case BT_GAP_LE_DISCONNECT_IND: {
    299                      BT_LOGI("GATTC", "BT_GAP_DISCONNECT_IND %s",
    300                              (status == BT_STATUS_SUCCESS) ? "Success" : "Failed");
    301                      gattc_disconnect_cb(status, (bt_hci_evt_disconnect_complete_t *)buff);
    302                      delete_connection_info(buff);
    303                      }
    304                      break;
    305                  case BT_GAP_LE_SET_SCAN_CNF:{
    306                      BT_LOGI("GATTC", "BT_GAP_SET_SCAN_CNF %s",
    307                              (status == BT_STATUS_SUCCESS) ? "Success" : "Failed");
    308                      }
    309                      break;
    310                  default:
    311                      break;
    312              }
    313              status = bt_gattc_event_callback(msg, status, buff);
    314          
    315              return status;
    316          }
    317          #endif
    318          
    319          void gattc_disconnect_cb(bt_status_t status, bt_hci_evt_disconnect_complete_t *param)
    320          {
    321              gattc_conn_t *gattc_conn;
    322          
    323              BT_LOGI("GATTC", "gattc_disconnect_cb: -- start: con_id = %d, err_code = %d", param->connection_handle, status);
    324              gattc_conn = bt_gattc_link_info_by_id(param->connection_handle);
    325          
    326              if (gattc_conn) {
    327                  BT_LOGI("GATTC", "gattc_disconnect_cb: --gattc_conn = %x ", gattc_conn);
    328                  gattc_notify_conn_info_to_all_user(gattc_conn, status, NULL, 0);
    329                  memset(gattc_conn, 0, sizeof(gattc_conn_t));
    330              }
    331              BT_LOGI("GATTC", "gattc_disconnect_cb: -- end");
    332          }
    333          
    334          void gattc_connect_cb(bt_status_t status, app_bt_connection_cb_t *param)
    335          {
    336              gattc_conn_t *gattc_conn = NULL;
    337          
    338              if (param) {
    339                  BT_LOGI("GATTC", "gattc_connect_cb: -- start: connect_handle = %d, err_code = %d", param->connection_handle, status);
    340                  gattc_conn = bt_gattc_link_info_by_id(param->connection_handle);
    341          
    342                  if (gattc_conn == NULL) {
    343                      BT_LOGI("GATTC", "gattc_connect_cb: -- conn is not exist");
    344                      gattc_conn = gattc_create_conn(param);
    345                  }
    346                  if (gattc_conn) {
    347          
    348                      BT_LOGI("GATTC", "gattc_connect_cb: -- conn link is valid");
    349                      gattc_conn->state = GATTC_CONNECTED;
    350                      gattc_notify_conn_info_to_all_user(gattc_conn, status, param, 1);
    351                  } else {
    352                      BT_LOGI("GATTC", "gattc_connect_cb: -- create conn is fail");
    353                  }
    354              }
    355          
    356          }
    357          
    358          
    359          void gattc_service_init(void)
    360          {
    361              /*initition*/
    362              BT_LOGI("GATTC", "gattc service init  start...");
    363              memset(&g_gattc_ctx, 0, sizeof(gattc_context_t));
    364              BT_LOGI("GATTC", "gattc service init  end...");
    365          }
    366          
    367          
    368          /**
    369          *need listern when bluetooth power on , it should do scan
    370          */
    371          bt_status_t bt_gattc_set_scan(bt_hci_cmd_le_set_scan_enable_t *is_enable)
    372          {
    373              bt_status_t status;
    374              bt_hci_cmd_le_set_scan_parameters_t para;
    375          
    376              BT_LOGI("GATTC", "gattc_start_scan: -- start");
    377              para.le_scan_type = BT_HCI_SCAN_TYPE_ACTIVE;
    378              para.le_scan_interval = 0x0024; //0x0030;
    379              para.le_scan_window = 0x0011;//0x0030;
    380              para.own_address_type = BT_HCI_SCAN_ADDR_RANDOM;
    381              para.scanning_filter_policy = 0x00;
    382          
    383              status = bt_gap_le_set_scan(is_enable, &para);
    384          
    385              BT_LOGI("GATTC", "gattc_start_scan: -- end: status = %d", status);
    386          	return status;
    387          }
    388          
    389          
    390          bt_status_t bt_gattc_connect(uint8_t *addr, uint8_t type)
    391          {
    392              bt_status_t status;
    393              BT_LOGI("GATTC", "[GATTC]gattc_connect: -- end: start");
    394          
    395              bt_hci_cmd_le_create_connection_t conn_para;
    396              conn_para.le_scan_interval = 0x0010;
    397              conn_para.le_scan_window = 0x0010;
    398              conn_para.initiator_filter_policy = BT_HCI_CONN_FILTER_ASSIGNED_ADDRESS;
    399              if (type == 0) {
    400                  conn_para.peer_address.type = BT_ADDR_PUBLIC;
    401              } else {
    402                  conn_para.peer_address.type = BT_ADDR_RANDOM;
    403              }
    404          
    405              memcpy(conn_para.peer_address.addr, addr, BT_BD_ADDR_LEN);
    406          
    407              conn_para.own_address_type = BT_ADDR_RANDOM;
    408              conn_para.conn_interval_min = 0x0006;
    409              conn_para.conn_interval_max = 0x0080;
    410              conn_para.conn_latency = 0x0000;
    411              conn_para.supervision_timeout = 0x07d0;
    412              conn_para.minimum_ce_length = 0x0000;
    413              conn_para.maximum_ce_length = 0x0050;
    414              status = bt_gap_le_connect(&conn_para);
    415          
    416              BT_LOGI("GATTC", "gattc_connect: -- end: status = %d", status);
    417              return status;
    418          }
    419          
    420          
    421          
    422          bt_status_t  bt_gattc_disconnect(uint16_t conn_id)
    423          {
    424              bt_status_t status;
    425              bt_hci_cmd_disconnect_t disconnect;
    426              disconnect.connection_handle = conn_id;
    427              BT_LOGI("GATTC", "connection_handle(0x%04x)", disconnect.connection_handle);
    428              disconnect.reason = BT_HCI_STATUS_REMOTE_USER_TERMINATED_CONNECTION;
    429              status = bt_gap_le_disconnect(&disconnect);
    430              BT_LOGI("GATTC", "bt_gattc_disconnect: -- status = %d", status);
    431          	return status;
    432          }
    433          
    434          
    435          static gattc_conn_t *gattc_create_conn(app_bt_connection_cb_t *conn_info)
    436          {
    437              gattc_conn_t *gattc_conn;
    438              for (uint8_t i = 0 ; i < SRV_MAX_DEV; i++) {
    439                  gattc_conn = g_gattc_ctx.conntext + i;
    440                  if (!g_gattc_ctx.conntext[i].flag) {
    441                      memset(gattc_conn, 0, sizeof(gattc_conn_t));
    442                      gattc_conn->flag = 1;
    443                      gattc_conn->state = GATTC_CONNECTED;
    444                      gattc_conn->conn_id = conn_info->connection_handle;
    445                      return gattc_conn;
    446                  }
    447              }
    448              return NULL;
    449          }
    450          
    451          
    452          gattc_conn_t *bt_gattc_link_info_by_id(uint16_t conn_id)
    453          {
    454              uint8_t i;
    455              gattc_conn_t *gattc_conn;
    456              BT_LOGI("GATTC", "bt_gattc_link_info_by_id--start: con_id = %d", conn_id);
    457              for (i = 0 ; i < SRV_MAX_DEV; i++) {
    458                  gattc_conn = g_gattc_ctx.conntext + i;
    459                  if (gattc_conn->flag) {
    460                      if (gattc_conn->conn_id == conn_id ) {
    461                          return gattc_conn;
    462                      }
    463                  }
    464              }
    465              BT_LOGI("Gattc", "bt_gattc_link_info_by_id--NOT Find conn info ");
    466              return NULL;
    467          }
    468          
    469          #ifdef __BT_HB_DUO__
    470          const bt_gap_config_t bt_custom_config = {
    471          	.inquiry_mode = 2,
    472          	.io_capability = BT_GAP_IO_CAPABILITY_NO_INPUT_NO_OUTPUT,
    473          	.cod = 0x240404,
    474          	.device_name = { "HB Duo dev" },
    475          };
    476          
    477          const bt_gap_config_t* bt_gap_get_local_configuration(void)
    478          {
    479          	return &bt_custom_config;
    480          }
    481          #endif
    482          
    483          #if 0 //MTK_BLE_GPIO_SERVICE
    484          bt_gap_le_local_config_req_ind_t *bt_gap_le_get_local_config(void)
    485          {
    486          	g_hr_app_local_config.local_key_req = &hr_local_key_req;
    487          	g_hr_app_local_config.sc_only_mode_req = hr_sc_only;
    488          	return &g_hr_app_local_config;
    489          }
    490          
    491          bt_gap_le_bonding_info_t le_bond;
    492          bt_gap_le_bonding_info_t *bt_gap_le_get_bonding_info(const bt_addr_t remote_addr)
    493          {
    494          	BT_LOGI("GATTC", "BT_GAP_BONDING_INFO_REQ_IND %s");
    495          
    496          	return &le_bond;//&(get_bonded_info(&remote_addr, 1)->info);
    497          }
    498          
    499          bt_status_t bt_gap_le_get_pairing_config(bt_gap_le_bonding_start_ind_t *ind)
    500          {
    501          	ind->pairing_config_req = hr_pairing_config_req;
    502          	return BT_STATUS_SUCCESS;
    503          }
    504          #endif
    505          
    506          #ifdef  __TS_WIN32__
    507          #define BT_A2DP_MAKE_CODEC_SBC(role, min_bit_pool, max_bit_pool, block_length, subband_num, alloc_method, sample_rate, channel_mode) { \
    508                              BT_A2DP_CODEC_SBC, role, sizeof(bt_a2dp_sbc_codec_t), {\
    509                              (channel_mode&0x0F) | (sample_rate&0x0F)<<4, \
    510          					(alloc_method&0x03) | (subband_num&0x03)<<2 | (block_length&0x0F)<<4, \
    511          					(min_bit_pool & 0xF) ,(min_bit_pool & 0xF)>>2,((min_bit_pool>>4) & 0xF), (max_bit_pool & 0xFF)}}
    512          
    513          #define BT_A2DP_MAKE_CODEC_AAC(role, vbr, object_type, channels, sample_rate, bit_rate)  { \
    514                              BT_A2DP_CODEC_AAC, role, sizeof(bt_a2dp_aac_codec_t), {\
    515                              object_type, ((sample_rate>>4)&0xFF), 0, (channels),(sample_rate&0x0F), \
    516                              ((bit_rate>>16)&0x7F), (vbr), ((bit_rate>>8)&0xFF), (bit_rate&0xFF)}}
    517          
    518          const static bt_a2dp_codec_capability_t init_codec[] = {
    519          	//{ 0, 1, 4, { 0xff, 0xff, 0x19, 0x4d } },
    520          	//{ 2, 1, 6, { 0xc0, 0xff, 0x8c, 0xe0, 0x00, 0x00 } }
    521          	BT_A2DP_MAKE_CODEC_SBC(BT_A2DP_SINK, 2, 75, 0x0f, 0x0f, 0x03, 0x0f, 0x0f),
    522          	BT_A2DP_MAKE_CODEC_AAC(BT_A2DP_SINK, 1, 0xC0, 0x03, 0x0ff8, 0x60000)
    523          };
    524          bt_status_t bt_a2dp_get_init_params(bt_a2dp_init_params_t *params)
    525          {
    526          	int32_t idx = 0;
    527          	bt_a2dp_codec_capability_t * codec = init_codec;
    528          	if (params == NULL) {
    529          		return BT_STATUS_FAIL;
    530          	}
    531          
    532          	params->codec_number = 2;
    533          	params->codec_list = (bt_a2dp_codec_capability_t *)init_codec;
    534          	BT_LOGI("avtdp", "[Music_APP] codec, type:%d, 0x%08x", init_codec[0].type, *(uint32_t *)&init_codec[0].codec);
    535          	BT_LOGI("avtdp", "[Music_APP] codec, type:%d, 0x%08x", init_codec[1].type, *(uint32_t *)&init_codec[1].codec);
    536          
    537          	BT_LOGI("avtdp", "[Music_APP] A2DP init. OK.");
    538          
    539          	return BT_STATUS_SUCCESS;
    540          }
    541          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      40   bt_gattc_connect
        40   -> __aeabi_memcpy
        40   -> bt_debug_log
        40   -> bt_gap_le_connect
      16   bt_gattc_disconnect
        16   -> bt_debug_log
        16   -> bt_gap_le_disconnect
       8   bt_gattc_link_info_by_id
         8   -> bt_debug_log
      16   bt_gattc_set_scan
        16   -> bt_debug_log
        16   -> bt_gap_le_set_scan
      40   bt_hr_io_callback
        40   -> bt_debug_log
        40   -> bt_gap_le_set_scan
        40   -> bt_gattc_connect
        40   -> bt_gattc_disconnect
        40   -> bt_gattc_set_scan
        40   -> bt_power_off
        40   -> copy_str_to_addr
        40   -> find_conneciton_info_by_handle
        40   -> gattc_set_adv
        40   -> strlen
        40   -> strtoul
      32   copy_str_to_addr
        32   -> sscanf
      16   gattc_connect_cb
         0   -> bt_debug_log
        16   -> bt_debug_log
        16   -> bt_gattc_link_info_by_id
        16   -> gattc_create_conn
         0   -> gattc_notify_conn_info_to_all_user
      16   gattc_create_conn
        16   -> __aeabi_memset4
      16   gattc_disconnect_cb
        16   -> __aeabi_memset4
         0   -> bt_debug_log
        16   -> bt_debug_log
        16   -> bt_gattc_link_info_by_id
        16   -> gattc_notify_conn_info_to_all_user
       8   gattc_service_init
         8   -> __aeabi_memset4
         0   -> bt_debug_log
         8   -> bt_debug_log
      40   gattc_set_adv
        40   -> bt_gap_le_set_advertising


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable32
       4  ??DataTable32_1
       4  ??DataTable32_2
       8  ?_0
      68  ?_1
      72  ?_10
      52  ?_11
      40  ?_12
      76  ?_13
      52  ?_14
      52  ?_15
      56  ?_16
      44  ?_17
      40  ?_18
      40  ?_19
      44  ?_2
      52  ?_20
      48  ?_21
      48  ?_22
      40  ?_23
      48  ?_24
      60  ?_25
      60  ?_26
      32  ?_27
      52  ?_3
      36  ?_4
     132  ?_5
      48  ?_6
      52  ?_7
      64  ?_8
     256  ?_9
     126  bt_gattc_connect
      46  bt_gattc_disconnect
      68  bt_gattc_link_info_by_id
      66  bt_gattc_set_scan
     274  bt_hr_io_callback
      84  copy_str_to_addr
      92  gattc_connect_cb
      64  gattc_create_conn
      76  gattc_disconnect_cb
      34  gattc_service_init
      70  gattc_set_adv

 
   256 bytes in section .rodata
 2 428 bytes in section .text
 
 2 428 bytes of CODE  memory
   256 bytes of CONST memory

Errors: none
Warnings: none
