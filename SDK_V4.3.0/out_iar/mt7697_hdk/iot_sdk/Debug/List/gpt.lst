###############################################################################
#
# IAR ANSI C/C++ Compiler V8.11.2.13589/W32 for ARM       28/Jun/2017  11:27:22
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\driver\chip\mt7687\src\common\gpt.c
#    Command line =  
#        -f C:\Users\leo\AppData\Local\Temp\EW6A91.tmp
#        (C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\driver\chip\mt7687\src\common\gpt.c
#        -D MTK_LOAD_MAC_ADDR_FROM_EFUSE -D MTK_PING_OUT_ENABLE -D
#        MTK_WIFI_PROFILE_ENABLE -D PCFG_OS=2 -D _REENT_SMALL -D
#        MTK_MINISUPP_ENABLE -D MTK_MINICLI_ENABLE -D MTK_BSPEXT_ENABLE -D
#        MTK_HAL_LOWPOWER_ENABLE -D MTK_LWIP_ENABLE -D
#        MTK_HTTPCLIENT_SSL_ENABLE -D MTK_IPERF_ENABLE -D PRODUCT_VERSION=7697
#        -D MTK_FLASH_DIRECT_DL -D MTK_PATCH_DL_ENABLE -D MTK_SMTCN_V5_ENABLE
#        -D MTK_CLI_TEST_MODE_ENABLE -D MTK_WIFI_REPEATER_ENABLE -D
#        CONFIG_REPEATER -D MTK_DEBUG_LEVEL_INFO -D MTK_DEBUG_LEVEL_WARNING -D
#        MTK_DEBUG_LEVEL_ERROR -D configOVERRIDE_DEFAULT_TICK_CONFIGURATION -D
#        CFG_SUPPORT_SMNT_PROTO=2 -D BT_DEBUG -D MTK_BLE_CLI_ENABLE -D
#        MTK_BLE_BQB_CLI_ENABLE -D MTK_HCI_CONSOLE_MIX_ENABLE -D
#        MTK_BLE_BQB_TEST_ENABLE -D MTK_BLE_SMTCN_ENABLE -D
#        MBEDTLS_CONFIG_FILE=<config-mtk-md5.h> -D MTK_NVDM_ENABLE -D
#        MTK_WIFI_PRIVILEGE_ENABLE -D __BT_DEBUG__ -lcN
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\out_iar\mt7697_hdk\iot_sdk\Debug\List
#        -lA
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\out_iar\mt7697_hdk\iot_sdk\Debug\List
#        --diag_suppress Pa050,Ta022,Ta023 --diag_error Pe606 -o
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\out_iar\mt7697_hdk\iot_sdk\Debug\Obj
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0_2\arm\INC\c\DLib_Config_Full.h" -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\kernel\service\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\kernel\rtos\FreeRTOS\Source\include\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\kernel\rtos\FreeRTOS\Source\portable\IAR\ARM_CM4F\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\kernel\rtos\FreeRTOS\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\driver\CMSIS\Device\MTK\mt7687\Include\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\driver\CMSIS\Include\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\third_party\lwip\src\include\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\third_party\lwip\ports\include\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\driver\chip\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\driver\chip\mt7687\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\MTK\wifi_service\combo\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\MTK\dhcpd\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\MTK\minicli\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\MTK\minisupp\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\prebuilt\middleware\MTK\minisupp\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\driver\chip\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\driver\chip\mt7687\src\common\include\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\third_party\lwip\src\include\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\third_party\lwip\ports\include\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\third_party\lwip\src\include\lwip\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\project\common\bsp_ex\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\MTK\nvdm\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\third_party\ping\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\MTK\smtcn\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\MTK\smtcn\inc\internal\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\MTK\iperf\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\project\mt7697_hdk\apps\iot_sdk\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\driver\chip\mt7687\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\driver\board\mt76x7_hdk\util\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\MTK\wifi_service\combo\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\MTK\bluetooth\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\prebuilt\middleware\MTK\bluetooth\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\project\mt7697_hdk\apps\iot_sdk\src\ut_app\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\driver\board\mt76x7_hdk\ept\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\third_party\mbedtls\include\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\third_party\mbedtls\configs\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\driver\board\mt76x7_hdk\external_flash\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\MTK\connsys\inc\
#        -Om -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0_2\arm\CMSIS\Include\")
#    Locale       =  C
#    List file    =  
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\out_iar\mt7697_hdk\iot_sdk\Debug\List\gpt.lst
#    Object file  =  
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\out_iar\mt7697_hdk\iot_sdk\Debug\Obj\gpt.o
#
###############################################################################

C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\driver\chip\mt7687\src\common\gpt.c
      1          /* Copyright Statement:
      2           *
      3           * (C) 2005-2016  MediaTek Inc. All rights reserved.
      4           *
      5           * This software/firmware and related documentation ("MediaTek Software") are
      6           * protected under relevant copyright laws. The information contained herein
      7           * is confidential and proprietary to MediaTek Inc. ("MediaTek") and/or its licensors.
      8           * Without the prior written permission of MediaTek and/or its licensors,
      9           * any reproduction, modification, use or disclosure of MediaTek Software,
     10           * and information contained herein, in whole or in part, shall be strictly prohibited.
     11           * You may only use, reproduce, modify, or distribute (as applicable) MediaTek Software
     12           * if you have agreed to and been bound by the applicable license agreement with
     13           * MediaTek ("License Agreement") and been granted explicit permission to do so within
     14           * the License Agreement ("Permitted User").  If you are not a Permitted User,
     15           * please cease any access or use of MediaTek Software immediately.
     16           * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
     17           * THAT MEDIATEK SOFTWARE RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES
     18           * ARE PROVIDED TO RECEIVER ON AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL
     19           * WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
     20           * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
     21           * NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
     22           * SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
     23           * SUPPLIED WITH MEDIATEK SOFTWARE, AND RECEIVER AGREES TO LOOK ONLY TO SUCH
     24           * THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. RECEIVER EXPRESSLY ACKNOWLEDGES
     25           * THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES
     26           * CONTAINED IN MEDIATEK SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK
     27           * SOFTWARE RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
     28           * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND
     29           * CUMULATIVE LIABILITY WITH RESPECT TO MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
     30           * AT MEDIATEK'S OPTION, TO REVISE OR REPLACE MEDIATEK SOFTWARE AT ISSUE,
     31           * OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY RECEIVER TO
     32           * MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
     33           */
     34          
     35          /*****************************************************************************
     36           *
     37           * Filename:
     38           * ---------
     39           *    gpt.c
     40           *
     41           * Project:
     42           * --------
     43           *   Maui_Software
     44           *
     45           * Description:
     46           * ------------
     47           *   This Module defines the GPT driver.
     48           *
     49           * Author:
     50           * -------
     51           *  James Liu
     52           *
     53           ****************************************************************************/
     54          #include "hal_gpt.h"
     55          
     56          #ifdef HAL_GPT_MODULE_ENABLED
     57          #include "type_def.h"
     58          #include "debug.h"
     59          
     60          #include "gpt.h"
     61          #include "nvic.h"
     62          #include "system_mt7687.h"
     63          #include "timer.h"
     64          #include "hal_nvic.h"
     65          
     66          
     67          static GPTStruct GPTTimer;
     68          
     69          
     70          //workaround: ADC use sys tick to access FIFO instead of GPT
     71          volatile UINT32 g_u4ClkCnt1ms = 0;
     72          
     73          void GPT_ResetTimer(kal_uint32 timerNum, kal_uint32 countValue, bool autoRepeat)
     74          {
     75              ASSERT(timerNum == 0 || timerNum == 1);
     76          
     77              if (timerNum == 0) {
     78                  DRV_Reg32(GPT0_ICNT) = countValue;
     79                  if (KAL_TRUE == autoRepeat) {
     80                      DRV_Reg32(GPT0_CTRL) |= GPT_CTRL_AUTOMODE;
     81                  } else {
     82                      DRV_Reg32(GPT0_CTRL) &= ~GPT_CTRL_AUTOMODE;
     83                  }
     84              } else if (timerNum == 1) {
     85                  DRV_Reg32(GPT1_ICNT) = countValue;
     86                  if (KAL_TRUE == autoRepeat) {
     87                      DRV_Reg32(GPT1_CTRL) |= GPT_CTRL_AUTOMODE;
     88                  } else {
     89                      DRV_Reg32(GPT1_CTRL) &= ~GPT_CTRL_AUTOMODE;
     90                  }
     91              }
     92          }
     93          
     94          void GPT_Start(kal_uint32 timerNum)
     95          {
     96              ASSERT(timerNum == 0 || timerNum == 1 || timerNum == 4);
     97          
     98              if (timerNum == 0) {
     99                  DRV_Reg32(GPT0_CTRL) |= GPT_CTRL_EN;
    100                  NVIC_EnableIRQ((IRQn_Type)CM4_GPT_IRQ);
    101              } else if (timerNum == 1) {
    102                  DRV_Reg32(GPT1_CTRL) |= GPT_CTRL_EN;
    103                  NVIC_EnableIRQ((IRQn_Type)CM4_GPT_IRQ);
    104              } else if (timerNum == 4) {
    105                  DRV_Reg32(GPT4_CTRL) |= GPT_CTRL_EN;
    106              }
    107          
    108          }
    109          
    110          void GPT_Stop(kal_uint32 timerNum)
    111          {
    112              if (timerNum == 0) {
    113                  DRV_Reg32(GPT_IER)   &= ~GPT0_INT_EN;
    114                  DRV_Reg32(GPT0_CTRL) &= ~GPT_CTRL_EN;
    115                  DRV_Reg32(GPT_ISR)    = GPT0_INT;
    116          
    117              } else if (timerNum == 1) {
    118                  DRV_Reg32(GPT_IER)   &= ~GPT1_INT_EN;
    119                  DRV_Reg32(GPT1_CTRL) &= ~GPT_CTRL_EN;
    120                  DRV_Reg32(GPT_ISR)    = GPT1_INT;
    121              } else if (timerNum == 2) {
    122                  DRV_Reg32(GPT2_CTRL) &= ~GPT_CTRL_EN;
    123              } else if (timerNum == 4) {
    124                  DRV_Reg32(GPT4_CTRL) &= ~GPT_CTRL_EN;
    125              }
    126          
    127          
    128          }
    129          
    130          void GPT_INT_Handler(hal_nvic_irq_t irq_number)
    131          {
    132              kal_uint16 GPT_Status;
    133          
    134              irq_number = irq_number;
    135              GPT_Status = DRV_Reg32(GPT_ISR);
    136              DRV_Reg32(GPT_ISR) = GPT_Status;
    137          
    138              if (GPT_Status & GPT0_INT) {
    139                  clear_TMR_INT_status_bit(TMR0); //clear gpt Int status bit
    140                  GPTTimer.GPT_FUNC.gpt0_func();
    141              } else if (GPT_Status & GPT1_INT) {
    142                  clear_TMR_INT_status_bit(TMR1); //clear gpt Int status bit
    143                  GPTTimer.GPT_FUNC.gpt1_func();
    144              }
    145          }
    146          
    147          void GPT_init(kal_uint32 timerNum, kal_uint32 speed_32us, void (*GPT_Callback)(void))
    148          {
    149              ASSERT(timerNum == 0 || timerNum == 1 || timerNum == 2 || timerNum == 4);
    150          
    151              if (timerNum == 0 || timerNum == 1) {
    152                  hal_nvic_register_isr_handler((IRQn_Type)CM4_GPT_IRQ, GPT_INT_Handler); /* GPT0 and GPT1 share the same IRQ line */
    153                  NVIC_SetPriority((IRQn_Type)CM4_GPT_IRQ, CM4_GPT_PRI);
    154                  NVIC_EnableIRQ((IRQn_Type)CM4_GPT_IRQ);
    155              }
    156          
    157              if (timerNum == 0) {
    158                  GPTTimer.GPT_FUNC.gpt0_func = GPT_Callback;
    159                  DRV_Reg32(GPT_IER)   |= GPT0_INT_EN;
    160                  DRV_Reg32(GPT0_CTRL) |= (speed_32us << 2);
    161              } else if (timerNum == 1) {
    162                  GPTTimer.GPT_FUNC.gpt1_func = GPT_Callback;
    163                  DRV_Reg32(GPT_IER)   |= GPT1_INT_EN;
    164                  DRV_Reg32(GPT1_CTRL) |= (speed_32us << 2);
    165              } else if (timerNum == 2) {
    166                  DRV_Reg32(GPT2_CTRL) |= GPT_CTRL_EN | (speed_32us << 1);
    167              } else if (timerNum == 4) {
    168                  DRV_Reg32(GPT4_CTRL) |= GPT_CTRL_EN | (speed_32us << 1);  //bus clock or half bus clock
    169                  DRV_Reg32(GPT4_INIT) = 0;
    170              }
    171          }
    172          
    173          kal_uint32 GPT_return_current_count(kal_uint32 timerNum)
    174          {
    175              kal_uint32 current_count;
    176          
    177              ASSERT(timerNum == 0 || timerNum == 1 || timerNum == 2 || timerNum == 4);
    178          
    179              if (timerNum == 0) {
    180                  current_count = DRV_Reg32(GPT0_CNT);
    181              } else if (timerNum == 1) {
    182                  current_count = DRV_Reg32(GPT1_CNT);
    183              } else if (timerNum == 2) {
    184                  current_count = DRV_Reg32(GPT2_CNT);
    185              } else if (timerNum == 4) {
    186                  current_count = DRV_Reg32(GPT4_CNT);
    187              }
    188          
    189              return current_count;
    190          }
    191          
    192          
    193          void CM4_GPT2Init(void)
    194          {
    195              GPT_init(2, 1, NULL);   //speed: 1x32k hz
    196          }
    197          
    198          void CM4_GPT4Init(void)
    199          {
    200              GPT_init(4, 1, NULL);  //speed: bus clock
    201          }
    202          
    203          #endif
    204          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   CM4_GPT2Init
         0   -> GPT_init
       0   CM4_GPT4Init
         0   -> GPT_init
       8   GPT_INT_Handler
         0   -- Indirect call
         8   -> clear_TMR_INT_status_bit
       8   GPT_ResetTimer
         8   -> printf
       8   GPT_Start
         0   -> NVIC_EnableIRQ
         8   -> printf
       0   GPT_Stop
      16   GPT_init
        16   -> NVIC_EnableIRQ
        16   -> NVIC_SetPriority
        16   -> hal_nvic_register_isr_handler
        16   -> printf
       8   GPT_return_current_count
         8   -> printf
       0   NVIC_EnableIRQ
       4   NVIC_SetPriority


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable9
       4  ??DataTable9_1
       4  ??DataTable9_2
       4  ??DataTable9_3
       4  ??DataTable9_4
       4  ??DataTable9_5
       4  ??DataTable9_6
       4  ??DataTable9_7
       4  ??DataTable9_8
      40  ?_0
      68  ?_1
       8  CM4_GPT2Init
       8  CM4_GPT4Init
      12  GPTTimer
      54  GPT_INT_Handler
      96  GPT_ResetTimer
     100  GPT_Start
      88  GPT_Stop
     180  GPT_init
      86  GPT_return_current_count
      18  NVIC_EnableIRQ
      30  NVIC_SetPriority
       4  g_u4ClkCnt1ms

 
  16 bytes in section .bss
 812 bytes in section .text
 
 812 bytes of CODE memory
  16 bytes of DATA memory

Errors: none
Warnings: none
