###############################################################################
#
# IAR ANSI C/C++ Compiler V8.11.2.13589/W32 for ARM       28/Jun/2017  11:27:46
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\middleware\MTK\wifi_service\combo\src\init\wifi_default_config.c
#    Command line =  
#        -f C:\Users\leo\AppData\Local\Temp\EWC975.tmp
#        (C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\middleware\MTK\wifi_service\combo\src\init\wifi_default_config.c
#        -D MTK_LOAD_MAC_ADDR_FROM_EFUSE -D MTK_PING_OUT_ENABLE -D
#        MTK_WIFI_PROFILE_ENABLE -D PCFG_OS=2 -D _REENT_SMALL -D
#        MTK_MINISUPP_ENABLE -D MTK_MINICLI_ENABLE -D MTK_BSPEXT_ENABLE -D
#        MTK_HAL_LOWPOWER_ENABLE -D MTK_LWIP_ENABLE -D
#        MTK_HTTPCLIENT_SSL_ENABLE -D MTK_IPERF_ENABLE -D PRODUCT_VERSION=7697
#        -D MTK_FLASH_DIRECT_DL -D MTK_PATCH_DL_ENABLE -D MTK_SMTCN_V5_ENABLE
#        -D MTK_CLI_TEST_MODE_ENABLE -D MTK_WIFI_REPEATER_ENABLE -D
#        CONFIG_REPEATER -D MTK_DEBUG_LEVEL_INFO -D MTK_DEBUG_LEVEL_WARNING -D
#        MTK_DEBUG_LEVEL_ERROR -D configOVERRIDE_DEFAULT_TICK_CONFIGURATION -D
#        CFG_SUPPORT_SMNT_PROTO=2 -D BT_DEBUG -D MTK_BLE_CLI_ENABLE -D
#        MTK_BLE_BQB_CLI_ENABLE -D MTK_HCI_CONSOLE_MIX_ENABLE -D
#        MTK_BLE_BQB_TEST_ENABLE -D MTK_BLE_SMTCN_ENABLE -D
#        MBEDTLS_CONFIG_FILE=<config-mtk-md5.h> -D MTK_NVDM_ENABLE -D
#        MTK_WIFI_PRIVILEGE_ENABLE -D __BT_DEBUG__ -lcN
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\out_iar\mt7697_hdk\iot_sdk\Debug\List
#        -lA
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\out_iar\mt7697_hdk\iot_sdk\Debug\List
#        --diag_suppress Pa050,Ta022,Ta023 --diag_error Pe606 -o
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\out_iar\mt7697_hdk\iot_sdk\Debug\Obj
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0_2\arm\INC\c\DLib_Config_Full.h" -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\kernel\service\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\kernel\rtos\FreeRTOS\Source\include\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\kernel\rtos\FreeRTOS\Source\portable\IAR\ARM_CM4F\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\kernel\rtos\FreeRTOS\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\driver\CMSIS\Device\MTK\mt7687\Include\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\driver\CMSIS\Include\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\third_party\lwip\src\include\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\third_party\lwip\ports\include\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\driver\chip\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\driver\chip\mt7687\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\MTK\wifi_service\combo\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\MTK\dhcpd\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\MTK\minicli\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\MTK\minisupp\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\prebuilt\middleware\MTK\minisupp\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\driver\chip\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\driver\chip\mt7687\src\common\include\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\third_party\lwip\src\include\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\third_party\lwip\ports\include\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\third_party\lwip\src\include\lwip\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\project\common\bsp_ex\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\MTK\nvdm\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\third_party\ping\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\MTK\smtcn\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\MTK\smtcn\inc\internal\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\MTK\iperf\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\project\mt7697_hdk\apps\iot_sdk\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\driver\chip\mt7687\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\driver\board\mt76x7_hdk\util\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\MTK\wifi_service\combo\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\MTK\bluetooth\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\prebuilt\middleware\MTK\bluetooth\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\project\mt7697_hdk\apps\iot_sdk\src\ut_app\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\driver\board\mt76x7_hdk\ept\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\third_party\mbedtls\include\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\third_party\mbedtls\configs\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\driver\board\mt76x7_hdk\external_flash\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\MTK\connsys\inc\
#        -Om -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0_2\arm\CMSIS\Include\")
#    Locale       =  C
#    List file    =  
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\out_iar\mt7697_hdk\iot_sdk\Debug\List\wifi_default_config.lst
#    Object file  =  
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\out_iar\mt7697_hdk\iot_sdk\Debug\Obj\wifi_default_config.o
#
###############################################################################

C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\middleware\MTK\wifi_service\combo\src\init\wifi_default_config.c
      1          /* Copyright Statement:
      2           *
      3           * (C) 2005-2016  MediaTek Inc. All rights reserved.
      4           *
      5           * This software/firmware and related documentation ("MediaTek Software") are
      6           * protected under relevant copyright laws. The information contained herein
      7           * is confidential and proprietary to MediaTek Inc. ("MediaTek") and/or its licensors.
      8           * Without the prior written permission of MediaTek and/or its licensors,
      9           * any reproduction, modification, use or disclosure of MediaTek Software,
     10           * and information contained herein, in whole or in part, shall be strictly prohibited.
     11           * You may only use, reproduce, modify, or distribute (as applicable) MediaTek Software
     12           * if you have agreed to and been bound by the applicable license agreement with
     13           * MediaTek ("License Agreement") and been granted explicit permission to do so within
     14           * the License Agreement ("Permitted User").  If you are not a Permitted User,
     15           * please cease any access or use of MediaTek Software immediately.
     16           * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
     17           * THAT MEDIATEK SOFTWARE RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES
     18           * ARE PROVIDED TO RECEIVER ON AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL
     19           * WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
     20           * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
     21           * NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
     22           * SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
     23           * SUPPLIED WITH MEDIATEK SOFTWARE, AND RECEIVER AGREES TO LOOK ONLY TO SUCH
     24           * THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. RECEIVER EXPRESSLY ACKNOWLEDGES
     25           * THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES
     26           * CONTAINED IN MEDIATEK SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK
     27           * SOFTWARE RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
     28           * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND
     29           * CUMULATIVE LIABILITY WITH RESPECT TO MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
     30           * AT MEDIATEK'S OPTION, TO REVISE OR REPLACE MEDIATEK SOFTWARE AT ISSUE,
     31           * OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY RECEIVER TO
     32           * MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
     33           */
     34          
     35          #include "os.h"
     36          #include "wifi_api.h"
     37          #include "wifi_default_config.h"
     38          #include "syslog.h"
     39          #include "get_profile_string.h"
     40          #include "wifi_init.h"
     41          
     42          int32_t wifi_get_default_config(sys_cfg_t *syscfg)
     43          {
     44              if (NULL == syscfg) {
     45                  LOG_E(wifi, "syscfg is null");
     46                  return -1;
     47              }
     48          
     49              syscfg->opmode = WIFI_MODE_MONITOR;
     50              syscfg->country_region = WIFI_DEFAULT_COUNTRY_REGION;
     51              syscfg->country_region_a_band = WIFI_DEFAULT_COUNTRY_REGION_A_BAND;
     52              os_strncpy((char *)syscfg->country_code, WIFI_DEFAULT_COUNTRY_CODE, sizeof(syscfg->country_code));
     53              wifi_country_code_region_mapping(syscfg->country_code, &(syscfg->country_region), &(syscfg->country_region_a_band));
     54              syscfg->radio_off = 0;
     55              syscfg->dbg_level = WIFI_DEFAULT_N9_DEBUG_LEVEL;
     56              syscfg->rts_threshold = WIFI_DEFAULT_RTS_THRESHOLD;
     57              syscfg->frag_threshold = WIFI_DEFAULT_FRAGMENT_THRESHOLD;
     58          
     59              syscfg->sta_local_admin_mac = 1;
     60              wifi_conf_get_ip_from_str(syscfg->sta_ip_addr, "192.168.1.1");
     61              if (0 > wifi_config_get_mac_address(WIFI_PORT_STA, syscfg->sta_mac_addr)) {
     62                  LOG_W(wifi, "wifi_config_get_mac_address fail.");
     63                  return -1;
     64              }
     65              os_strncpy((char *)syscfg->sta_ssid, "MTK_SOFT_AP", sizeof(syscfg->sta_ssid));
     66              syscfg->sta_ssid_len = os_strlen("MTK_SOFT_AP");
     67              syscfg->sta_bss_type = WIFI_DEFAULT_STA_BSS_TYPE;
     68              syscfg->sta_channel = WIFI_DEFAULT_STA_CHANNEL;
     69              syscfg->sta_bw = WIFI_DEFAULT_STA_BANDWIDTH;
     70              syscfg->sta_wireless_mode = WIFI_DEFAULT_STA_WIRELESS_MODE;
     71              syscfg->sta_ba_decline = WIFI_DEFAULT_STA_BA_DECLINE;
     72              syscfg->sta_auto_ba = WIFI_DEFAULT_STA_AUTO_BA;
     73              syscfg->sta_ht_mcs = WIFI_DEFAULT_STA_HT_MCS;
     74              syscfg->sta_ht_ba_win_size = WIFI_DEFAULT_STA_HT_BA_WINDOW_SIZE;
     75              syscfg->sta_ht_gi = WIFI_DEFAULT_STA_HT_GI;
     76              syscfg->sta_ht_protect = WIFI_DEFAULT_STA_HT_PROTECT;
     77              syscfg->sta_ht_ext_ch = WIFI_DEFAULT_STA_HT_EXT_CHANNEL;
     78              syscfg->sta_wmm_capable = WIFI_DEFAULT_STA_WMM_CAPABLE;
     79              syscfg->sta_listen_interval = WIFI_DEFAULT_STA_LISTEN_INTERVAL;
     80              syscfg->sta_auth_mode = WIFI_AUTH_MODE_WPA_PSK_WPA2_PSK;
     81              syscfg->sta_encryp_type = WIFI_ENCRYPT_TYPE_TKIP_AES_MIX;
     82              os_strncpy((char *)syscfg->sta_wpa_psk, "12345678", sizeof(syscfg->sta_wpa_psk));
     83              syscfg->sta_wpa_psk_len = os_strlen("12345678");
     84              os_strncpy((char *)syscfg->sta_pmk, "", sizeof(syscfg->sta_pmk));
     85              syscfg->sta_pair_cipher = 0;
     86              syscfg->sta_group_cipher = 0;
     87              syscfg->sta_default_key_id = 0;
     88              syscfg->sta_ps_mode = wifi_get_ps_mode();
     89              syscfg->sta_keep_alive_period = WIFI_DEFAULT_STA_KEEP_ALIVE_PERIOD;
     90          
     91              syscfg->ap_local_admin_mac = 1;
     92              wifi_conf_get_ip_from_str(syscfg->ap_ip_addr, "192.168.1.1");
     93              if (0 > wifi_config_get_mac_address(WIFI_PORT_AP, syscfg->ap_mac_addr)) {
     94                  LOG_W(wifi, "wifi_config_get_mac_address fail.");
     95                  return -1;
     96              }
     97              os_strncpy((char *)syscfg->ap_ssid, "MTK_SOFT_AP", sizeof(syscfg->ap_ssid));
     98              syscfg->ap_ssid_len = os_strlen("MTK_SOFT_AP");
     99              syscfg->ap_channel = WIFI_DEFAULT_AP_CHANNEL;
    100              syscfg->ap_bw = WIFI_DEFAULT_AP_BANDWIDTH;
    101              syscfg->ap_wireless_mode = WIFI_DEFAULT_AP_WIRELESS_MODE;
    102              syscfg->ap_auto_ba = WIFI_DEFAULT_AP_AUTO_BA;
    103              syscfg->ap_ht_mcs = WIFI_DEFAULT_AP_HT_MCS;
    104              syscfg->ap_ht_ba_win_size = WIFI_DEFAULT_AP_HT_BA_WINDOW_SIZE;
    105              syscfg->ap_ht_gi = WIFI_DEFAULT_AP_HT_GI;
    106              syscfg->ap_ht_protect = WIFI_DEFAULT_AP_HT_PROTECT;
    107              syscfg->ap_ht_ext_ch = WIFI_DEFAULT_AP_HT_EXT_CHANNEL;
    108              syscfg->ap_wmm_capable = WIFI_DEFAULT_AP_WMM_CAPABLE;
    109              syscfg->ap_dtim_period = WIFI_DEFAULT_AP_DTIM_PERIOD;
    110              syscfg->ap_hide_ssid = WIFI_DEFAULT_AP_HIDDEN_SSID;
    111              syscfg->ap_auto_channel_select = WIFI_DEFAULT_AP_AUTO_CHANNEL_SELECT;
    112              syscfg->ap_auth_mode = WIFI_AUTH_MODE_WPA_PSK_WPA2_PSK;
    113              syscfg->ap_encryp_type = WIFI_ENCRYPT_TYPE_TKIP_AES_MIX;
    114              os_strncpy((char *)syscfg->ap_wpa_psk, "12345678", sizeof(syscfg->ap_wpa_psk));
    115              syscfg->ap_wpa_psk_len = os_strlen("12345678");
    116              os_strncpy((char *)syscfg->ap_pmk, "", sizeof(syscfg->ap_pmk));
    117              syscfg->ap_pair_cipher = 0;
    118              syscfg->ap_group_cipher = 0;
    119              syscfg->ap_default_key_id = 0;
    120              syscfg->ap_beacon_disable = WIFI_DEFAULT_AP_BEACON_DISABLE;
    121              syscfg->forwarding_zero_copy = 1;
    122          
    123              syscfg->bg_band_entry_num = wifi_conf_get_ch_table_from_str(syscfg->bg_band_triple,
    124                                                                          10, WIFI_DEFAULT_BG_CHANNEL_TABLE,
    125                                                                          os_strlen(WIFI_DEFAULT_BG_CHANNEL_TABLE));
    126          
    127              syscfg->a_band_entry_num = wifi_conf_get_ch_table_from_str(syscfg->a_band_triple,
    128                                                                         10, WIFI_DEFAULT_A_CHANNEL_TABLE,
    129                                                                         os_strlen(WIFI_DEFAULT_A_CHANNEL_TABLE));
    130              syscfg->mbss_enable = WIFI_DEFAULT_MBSS_ENABLE;
    131              os_strncpy((char *)syscfg->mbss_ssid1, WIFI_DEFAULT_MBSS_SSID1, sizeof(syscfg->mbss_ssid1));
    132              syscfg->mbss_ssid_len1 = os_strlen(WIFI_DEFAULT_MBSS_SSID1);
    133              os_strncpy((char *)syscfg->mbss_ssid2, WIFI_DEFAULT_MBSS_SSID2, sizeof(syscfg->mbss_ssid2));
    134              syscfg->mbss_ssid_len2 = os_strlen(WIFI_DEFAULT_MBSS_SSID2);
    135          
    136              syscfg->config_free_ready = 0;
    137              syscfg->config_free_enable = WIFI_DEFAULT_CONFIG_FREE_ENABLE;
    138              syscfg->beacon_lost_time = WIFI_DEFAULT_BEACON_LOST_TIME;
    139              syscfg->apcli_40mhz_auto_upbelow = WIFI_DEFAULT_APCLI_BW_AUTO_UP_BELOW;
    140              syscfg->wifi_privilege_enable = WIFI_DEFAULT_WIFI_PRIVILEGE_ENABLE;
    141          
    142              return 0;
    143          }
    144          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   wifi_get_default_config
        32   -- Indirect call
        32   -> os_strlen
        32   -> os_strncpy
        32   -> wifi_conf_get_ch_table_from_str
        32   -> wifi_conf_get_ip_from_str
        32   -> wifi_config_get_mac_address
        32   -> wifi_country_code_region_mapping
        32   -> wifi_get_ps_mode


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable12
       4  ??DataTable12_1
       4  ??DataTable12_2
      16  ?_0
       4  ?_1
      12  ?_10
      12  ?_2
      36  ?_3
      12  ?_4
      12  ?_5
       1  ?_6
       8  ?_7
      28  ?_8
      12  ?_9
     620  wifi_get_default_config
      24  -- Other

 
   5 bytes in section .rodata
 804 bytes in section .text
 
 804 bytes of CODE  memory
   5 bytes of CONST memory

Errors: none
Warnings: none
