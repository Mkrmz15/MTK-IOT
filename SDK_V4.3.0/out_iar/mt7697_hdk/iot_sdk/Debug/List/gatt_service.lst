###############################################################################
#
# IAR ANSI C/C++ Compiler V8.11.2.13589/W32 for ARM       28/Jun/2017  11:27:22
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\src\ut_app\gatt_service.c
#    Command line =  
#        -f C:\Users\leo\AppData\Local\Temp\EW6917.tmp
#        (C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\src\ut_app\gatt_service.c
#        -D MTK_LOAD_MAC_ADDR_FROM_EFUSE -D MTK_PING_OUT_ENABLE -D
#        MTK_WIFI_PROFILE_ENABLE -D PCFG_OS=2 -D _REENT_SMALL -D
#        MTK_MINISUPP_ENABLE -D MTK_MINICLI_ENABLE -D MTK_BSPEXT_ENABLE -D
#        MTK_HAL_LOWPOWER_ENABLE -D MTK_LWIP_ENABLE -D
#        MTK_HTTPCLIENT_SSL_ENABLE -D MTK_IPERF_ENABLE -D PRODUCT_VERSION=7697
#        -D MTK_FLASH_DIRECT_DL -D MTK_PATCH_DL_ENABLE -D MTK_SMTCN_V5_ENABLE
#        -D MTK_CLI_TEST_MODE_ENABLE -D MTK_WIFI_REPEATER_ENABLE -D
#        CONFIG_REPEATER -D MTK_DEBUG_LEVEL_INFO -D MTK_DEBUG_LEVEL_WARNING -D
#        MTK_DEBUG_LEVEL_ERROR -D configOVERRIDE_DEFAULT_TICK_CONFIGURATION -D
#        CFG_SUPPORT_SMNT_PROTO=2 -D BT_DEBUG -D MTK_BLE_CLI_ENABLE -D
#        MTK_BLE_BQB_CLI_ENABLE -D MTK_HCI_CONSOLE_MIX_ENABLE -D
#        MTK_BLE_BQB_TEST_ENABLE -D MTK_BLE_SMTCN_ENABLE -D
#        MBEDTLS_CONFIG_FILE=<config-mtk-md5.h> -D MTK_NVDM_ENABLE -D
#        MTK_WIFI_PRIVILEGE_ENABLE -D __BT_DEBUG__ -lcN
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\out_iar\mt7697_hdk\iot_sdk\Debug\List
#        -lA
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\out_iar\mt7697_hdk\iot_sdk\Debug\List
#        --diag_suppress Pa050,Ta022,Ta023 --diag_error Pe606 -o
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\out_iar\mt7697_hdk\iot_sdk\Debug\Obj
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0_2\arm\INC\c\DLib_Config_Full.h" -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\kernel\service\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\kernel\rtos\FreeRTOS\Source\include\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\kernel\rtos\FreeRTOS\Source\portable\IAR\ARM_CM4F\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\kernel\rtos\FreeRTOS\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\driver\CMSIS\Device\MTK\mt7687\Include\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\driver\CMSIS\Include\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\third_party\lwip\src\include\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\third_party\lwip\ports\include\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\driver\chip\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\driver\chip\mt7687\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\MTK\wifi_service\combo\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\MTK\dhcpd\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\MTK\minicli\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\MTK\minisupp\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\prebuilt\middleware\MTK\minisupp\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\driver\chip\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\driver\chip\mt7687\src\common\include\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\third_party\lwip\src\include\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\third_party\lwip\ports\include\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\third_party\lwip\src\include\lwip\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\project\common\bsp_ex\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\MTK\nvdm\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\third_party\ping\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\MTK\smtcn\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\MTK\smtcn\inc\internal\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\MTK\iperf\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\project\mt7697_hdk\apps\iot_sdk\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\driver\chip\mt7687\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\driver\board\mt76x7_hdk\util\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\MTK\wifi_service\combo\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\MTK\bluetooth\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\prebuilt\middleware\MTK\bluetooth\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\project\mt7697_hdk\apps\iot_sdk\src\ut_app\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\driver\board\mt76x7_hdk\ept\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\third_party\mbedtls\include\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\third_party\mbedtls\configs\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\driver\board\mt76x7_hdk\external_flash\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\MTK\connsys\inc\
#        -Om -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0_2\arm\CMSIS\Include\")
#    Locale       =  C
#    List file    =  
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\out_iar\mt7697_hdk\iot_sdk\Debug\List\gatt_service.lst
#    Object file  =  
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\out_iar\mt7697_hdk\iot_sdk\Debug\Obj\gatt_service.o
#
###############################################################################

C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\src\ut_app\gatt_service.c
      1          /* Copyright Statement:
      2           *
      3           * (C) 2005-2016  MediaTek Inc. All rights reserved.
      4           *
      5           * This software/firmware and related documentation ("MediaTek Software") are
      6           * protected under relevant copyright laws. The information contained herein
      7           * is confidential and proprietary to MediaTek Inc. ("MediaTek") and/or its licensors.
      8           * Without the prior written permission of MediaTek and/or its licensors,
      9           * any reproduction, modification, use or disclosure of MediaTek Software,
     10           * and information contained herein, in whole or in part, shall be strictly prohibited.
     11           * You may only use, reproduce, modify, or distribute (as applicable) MediaTek Software
     12           * if you have agreed to and been bound by the applicable license agreement with
     13           * MediaTek ("License Agreement") and been granted explicit permission to do so within
     14           * the License Agreement ("Permitted User").  If you are not a Permitted User,
     15           * please cease any access or use of MediaTek Software immediately.
     16           * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
     17           * THAT MEDIATEK SOFTWARE RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES
     18           * ARE PROVIDED TO RECEIVER ON AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL
     19           * WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
     20           * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
     21           * NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
     22           * SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
     23           * SUPPLIED WITH MEDIATEK SOFTWARE, AND RECEIVER AGREES TO LOOK ONLY TO SUCH
     24           * THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. RECEIVER EXPRESSLY ACKNOWLEDGES
     25           * THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES
     26           * CONTAINED IN MEDIATEK SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK
     27           * SOFTWARE RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
     28           * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND
     29           * CUMULATIVE LIABILITY WITH RESPECT TO MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
     30           * AT MEDIATEK'S OPTION, TO REVISE OR REPLACE MEDIATEK SOFTWARE AT ISSUE,
     31           * OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY RECEIVER TO
     32           * MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
     33           */
     34          
     35          #include "gatt_service.h"
     36          #include <string.h>
     37          const bt_uuid_t CLI_BT_SIG_UUID_SERVICE_CHANGED =
     38              BT_UUID_INIT_WITH_UUID16(BT_SIG_UUID16_SERVICE_CHANGED);
     39          const bt_uuid_t CLI_BT_SIG_UUID_DEVICE_NAME =
     40              BT_UUID_INIT_WITH_UUID16(BT_SIG_UUID16_DEVICE_NAME);
     41          const bt_uuid_t CLI_BT_SIG_UUID_APPEARANCE =
     42              BT_UUID_INIT_WITH_UUID16(BT_SIG_UUID16_APPEARANCE);
     43          const bt_uuid_t CLI_BT_SIG_UUID_PERIPHERAL_PREFERRED_CONNECTION_PARAMETERS =
     44              BT_UUID_INIT_WITH_UUID16(BT_SIG_UUID16_PERIPHERAL_PREFERRED_CONNECTION_PARAMETERS);
     45          const bt_uuid_t CLI_BT_SIG_UUID_SERIAL_NUMBER =
     46              BT_UUID_INIT_WITH_UUID16(BT_SIG_UUID16_SERIAL_NUMBER);
     47          const bt_uuid_t CLI_BT_SIG_UUID_CENTRAL_ADDRESS_RESOLUTION =
     48              BT_UUID_INIT_WITH_UUID16(BT_SIG_UUID16_CENTRAL_ADDRESS_RESOLUTION);
     49          
     50          //Declare every record here
     51          //service collects all bt_gatts_service_rec_t
     52          //IMPORTAMT: handle:0x0000 is reserved, please start your handle from 0x0001
     53          //GAP 0x0001
     54          char gatts_device_name[256]={"MTKHB"};
     55          static uint32_t bt_if_gap_dev_name_callback (const uint8_t rw, uint16_t handle, void *data, uint16_t size, uint16_t offset)
     56          {
     57              uint32_t str_size = strlen(gatts_device_name);
     58              uint32_t buf_size = sizeof(gatts_device_name);
     59              uint32_t copy_size;
     60              switch (rw) {
     61                  case BT_GATTS_CALLBACK_READ:
     62                      copy_size = (str_size> offset)?(str_size-offset):0;
     63                      if (size==0){
     64                          return str_size;
     65                      }
     66                      copy_size = (size > copy_size)? copy_size:size;
     67                      memcpy(data, gatts_device_name+offset, copy_size);
     68                      return copy_size;
     69                  case BT_GATTS_CALLBACK_WRITE:
     70                      copy_size = (size > buf_size)? buf_size:size;
     71                      memcpy(gatts_device_name, data, copy_size);
     72                      return copy_size;
     73                  default:
     74                      return BT_STATUS_SUCCESS;
     75              }
     76          }
     77          
     78          uint16_t gap_appearance=0x1234;//GAP appearance
     79          static uint32_t bt_if_gap_appearance_callback (const uint8_t rw, uint16_t handle, void *data, uint16_t size, uint16_t offset)
     80          {
     81              if (rw == BT_GATTS_CALLBACK_WRITE){
     82                  if (size != sizeof(gap_appearance)){ //Size check
     83                      return 0;
     84                  }
     85                  gap_appearance = *(uint16_t*)data;
     86              }else {
     87                  if (size!=0){
     88                      uint16_t *buf = (uint16_t*) data;
     89                      *buf = gap_appearance;
     90                  }
     91              }
     92              return sizeof(gap_appearance);
     93          }
     94          BT_GATTS_NEW_PRIMARY_SERVICE_16(bt_if_gap_primary_service, BT_GATT_UUID16_GAP_SERVICE);
     95          BT_GATTS_NEW_CHARC_16_WRITABLE(bt_if_gap_char4_dev_name, BT_GATT_CHARC_PROP_READ, 0x0003, BT_SIG_UUID16_DEVICE_NAME);
     96          BT_GATTS_NEW_CHARC_VALUE_CALLBACK(bt_if_gap_dev_name, CLI_BT_SIG_UUID_DEVICE_NAME,
     97                          BT_GATTS_REC_PERM_READABLE|BT_GATTS_REC_PERM_WRITABLE, bt_if_gap_dev_name_callback);
     98          /* For BQB test TC_GAR_SR_BV_07_C & TC_GAR_SR_BV_08_C*/
     99          BT_GATTS_NEW_CHARC_USER_DESCRIPTION(bt_if_gap_dev_name_user_description,
    100                          BT_GATTS_REC_PERM_READABLE, bt_if_gap_dev_name_callback);
    101          /* For BQB test TC_GAR_SR_BI_01_C */
    102          /* This test characteristic can not read and write */
    103          BT_GATTS_NEW_CHARC_16(bt_if_gap_char4_serial_number, 0,
    104                          0x0006, BT_SIG_UUID16_SERIAL_NUMBER);
    105          BT_GATTS_NEW_CHARC_VALUE_STR16(bt_if_gap_serial_number, CLI_BT_SIG_UUID_SERIAL_NUMBER,
    106                          0, 9, MY_VENDOR_SERIAL_NUMBER);
    107          /* For BQB test TC_GAR_SR_BI_28_C */
    108          //can not read and write.
    109          BT_GATTS_NEW_CHARC_USER_DESCRIPTION_STR16(bt_if_gap_serial_number_user_description,
    110                          0,
    111                          8, "MediaTek");
    112          BT_GATTS_NEW_CHARC_16_WRITABLE(bt_if_gap_char4_appearance, BT_GATT_CHARC_PROP_READ, 0x0009, BT_SIG_UUID16_APPEARANCE);
    113          BT_GATTS_NEW_CHARC_VALUE_CALLBACK(bt_if_gap_appearance, CLI_BT_SIG_UUID_APPEARANCE,
    114                          BT_GATTS_REC_PERM_READABLE|BT_GATTS_REC_PERM_WRITABLE, bt_if_gap_appearance_callback);
    115          
    116          BT_GATTS_NEW_CHARC_16(bt_if_gap_char4_ppcp, BT_GATT_CHARC_PROP_READ, 0x000B, BT_SIG_UUID16_PERIPHERAL_PREFERRED_CONNECTION_PARAMETERS);
    117          BT_GATTS_NEW_CHARC_VALUE_HALFW8_WRITABLE(bt_if_gap_ppcp, CLI_BT_SIG_UUID_PERIPHERAL_PREFERRED_CONNECTION_PARAMETERS,
    118                          BT_GATTS_REC_PERM_READABLE, 8, 0x0580,0x0c80,0x0010,0x0333);
    119          BT_GATTS_NEW_CHARC_16(bt_if_gap_char4_central_address_resolution, BT_GATT_CHARC_PROP_READ, 0x000D, BT_SIG_UUID16_CENTRAL_ADDRESS_RESOLUTION);
    120          BT_GATTS_NEW_CHARC_VALUE_UINT8_WRITABLE(bt_if_central_address_resolution, CLI_BT_SIG_UUID_CENTRAL_ADDRESS_RESOLUTION, BT_GATTS_REC_PERM_READABLE, 1);
    121          
    122          static const bt_gatts_service_rec_t *bt_if_gap_service_rec[] = {
    123              (const bt_gatts_service_rec_t*) &bt_if_gap_primary_service,
    124              (const bt_gatts_service_rec_t*) &bt_if_gap_char4_dev_name,
    125              (const bt_gatts_service_rec_t*) &bt_if_gap_dev_name,
    126              (const bt_gatts_service_rec_t*) &bt_if_gap_dev_name_user_description,
    127              (const bt_gatts_service_rec_t*) &bt_if_gap_char4_serial_number,
    128              (const bt_gatts_service_rec_t*) &bt_if_gap_serial_number,
    129              (const bt_gatts_service_rec_t*) &bt_if_gap_serial_number_user_description,
    130              (const bt_gatts_service_rec_t*) &bt_if_gap_char4_appearance,
    131              (const bt_gatts_service_rec_t*) &bt_if_gap_appearance,
    132              (const bt_gatts_service_rec_t*) &bt_if_gap_char4_ppcp,
    133              (const bt_gatts_service_rec_t*) &bt_if_gap_ppcp,
    134              (const bt_gatts_service_rec_t*) &bt_if_gap_char4_central_address_resolution,
    135              (const bt_gatts_service_rec_t*) &bt_if_central_address_resolution
    136              };
    137          
    138          static const bt_gatts_service_t bt_if_gap_service = {
    139              .starting_handle = 0x0001,
    140              .ending_handle = 0x000D,
    141              .required_encryption_key_size = 7,
    142              .records = bt_if_gap_service_rec
    143              };
    144          
    145          //GATT 0x0011
    146          /*---------------------------------------------*/
    147          BT_GATTS_NEW_PRIMARY_SERVICE_16(gatt_primary_service, BT_GATT_UUID16_GATT_SERVICE);
    148          BT_GATTS_NEW_CHARC_16(gatt_char4_service_changed, BT_GATT_CHARC_PROP_READ|BT_GATT_CHARC_PROP_NOTIFY|BT_GATT_CHARC_PROP_INDICATE,
    149                          0x0013, BT_SIG_UUID16_SERVICE_CHANGED);
    150          BT_GATTS_NEW_CHARC_VALUE_UINT32_WRITABLE(gatt_service_changed, CLI_BT_SIG_UUID_SERVICE_CHANGED,
    151                                       0x2, 0x0001050F);
    152          static const bt_gatts_service_rec_t *gatt_service_rec[] = {
    153              (const bt_gatts_service_rec_t*) &gatt_primary_service,
    154              (const bt_gatts_service_rec_t*) &gatt_char4_service_changed,
    155              (const bt_gatts_service_rec_t*) &gatt_service_changed
    156              };
    157          
    158          static const bt_gatts_service_t bt_if_gatt_service_ro = {
    159              .starting_handle = 0x0011,
    160              .ending_handle = 0x0013,
    161              .required_encryption_key_size = 7,
    162              .records = gatt_service_rec
    163              };
    164          
    165          #ifdef MTK_BLE_SMTCN_ENABLE
    166          extern const bt_gatts_service_t bt_if_ble_smtcn_service;
    167          #endif
    168          
    169          //server collects all service
    170          const bt_gatts_service_t * bt_if_clm_gatt_server[] = {
    171              &bt_if_gap_service,//0x0001
    172              &bt_if_gatt_service_ro,//0x0011
    173          #ifdef MTK_BLE_SMTCN_ENABLE
    174              &bt_if_ble_smtcn_service, //0x0014-0x0017
    175          #endif
    176              NULL
    177              };
    178          
    179          extern bool is_cli_bqb_mode;
    180          extern const bt_gatts_service_t** bqb_get_gatt_server(void);
    181          //When GATTS get req from remote client, GATTS will call bt_get_gatt_server() to get application's gatt service DB.
    182          //You have to return the DB(bt_gatts_service_t pointer) to gatts stack.
    183          const bt_gatts_service_t** bt_get_gatt_server()
    184          {
    185              if (is_cli_bqb_mode) {
    186                  return bqb_get_gatt_server();
    187              } else {
    188                  return bt_if_clm_gatt_server;
    189              }
    190          }
    191          
    192          extern bt_status_t bt_gatt_service_execute_write(uint16_t handle, uint8_t flag);
    193          bt_status_t bt_gatts_get_execute_write_result(bt_gatts_execute_write_req_t *req)
    194          {
    195              return bt_gatt_service_execute_write(req->handle, req->flag);
    196          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   bt_gatts_get_execute_write_result
         0   -> bt_gatt_service_execute_write
       0   bt_get_gatt_server
         0   -> bqb_get_gatt_server
       0   bt_if_gap_appearance_callback
      24   bt_if_gap_dev_name_callback
        24   -> __aeabi_memcpy
        24   -> strlen


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable21
       4  ??DataTable21_1
       4  ??DataTable21_2
       4  ??DataTable21_3
      16  CLI_BT_SIG_UUID_APPEARANCE
      16  CLI_BT_SIG_UUID_CENTRAL_ADDRESS_RESOLUTION
      16  CLI_BT_SIG_UUID_DEVICE_NAME
      16  CLI_BT_SIG_UUID_PERIPHERAL_PREFERRED_CONNECTION_PARAMETERS
      16  CLI_BT_SIG_UUID_SERIAL_NUMBER
      16  CLI_BT_SIG_UUID_SERVICE_CHANGED
       8  bt_gatts_get_execute_write_result
      16  bt_get_gatt_server
      12  bt_if_central_address_resolution
      16  bt_if_clm_gatt_server
      12  bt_if_gap_appearance
      34  bt_if_gap_appearance_callback
      16  bt_if_gap_char4_appearance
      16  bt_if_gap_char4_central_address_resolution
      16  bt_if_gap_char4_dev_name
      16  bt_if_gap_char4_ppcp
      16  bt_if_gap_char4_serial_number
      12  bt_if_gap_dev_name
      92  bt_if_gap_dev_name_callback
      12  bt_if_gap_dev_name_user_description
      24  bt_if_gap_ppcp
      12  bt_if_gap_primary_service
      24  bt_if_gap_serial_number
      24  bt_if_gap_serial_number_user_description
      12  bt_if_gap_service
      52  bt_if_gap_service_rec
      12  bt_if_gatt_service_ro
       2  gap_appearance
      16  gatt_char4_service_changed
      12  gatt_primary_service
      12  gatt_service_changed
      12  gatt_service_rec
     256  gatts_device_name

 
 418 bytes in section .data
 292 bytes in section .rodata
 166 bytes in section .text
 
 166 bytes of CODE  memory
 292 bytes of CONST memory
 418 bytes of DATA  memory

Errors: none
Warnings: none
