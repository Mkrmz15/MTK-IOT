###############################################################################
#
# IAR ANSI C/C++ Compiler V8.11.2.13589/W32 for ARM       28/Jun/2017  11:27:17
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\src\ut_app\connection_info.c
#    Command line =  
#        -f C:\Users\leo\AppData\Local\Temp\EW5709.tmp
#        (C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\src\ut_app\connection_info.c
#        -D MTK_LOAD_MAC_ADDR_FROM_EFUSE -D MTK_PING_OUT_ENABLE -D
#        MTK_WIFI_PROFILE_ENABLE -D PCFG_OS=2 -D _REENT_SMALL -D
#        MTK_MINISUPP_ENABLE -D MTK_MINICLI_ENABLE -D MTK_BSPEXT_ENABLE -D
#        MTK_HAL_LOWPOWER_ENABLE -D MTK_LWIP_ENABLE -D
#        MTK_HTTPCLIENT_SSL_ENABLE -D MTK_IPERF_ENABLE -D PRODUCT_VERSION=7697
#        -D MTK_FLASH_DIRECT_DL -D MTK_PATCH_DL_ENABLE -D MTK_SMTCN_V5_ENABLE
#        -D MTK_CLI_TEST_MODE_ENABLE -D MTK_WIFI_REPEATER_ENABLE -D
#        CONFIG_REPEATER -D MTK_DEBUG_LEVEL_INFO -D MTK_DEBUG_LEVEL_WARNING -D
#        MTK_DEBUG_LEVEL_ERROR -D configOVERRIDE_DEFAULT_TICK_CONFIGURATION -D
#        CFG_SUPPORT_SMNT_PROTO=2 -D BT_DEBUG -D MTK_BLE_CLI_ENABLE -D
#        MTK_BLE_BQB_CLI_ENABLE -D MTK_HCI_CONSOLE_MIX_ENABLE -D
#        MTK_BLE_BQB_TEST_ENABLE -D MTK_BLE_SMTCN_ENABLE -D
#        MBEDTLS_CONFIG_FILE=<config-mtk-md5.h> -D MTK_NVDM_ENABLE -D
#        MTK_WIFI_PRIVILEGE_ENABLE -D __BT_DEBUG__ -lcN
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\out_iar\mt7697_hdk\iot_sdk\Debug\List
#        -lA
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\out_iar\mt7697_hdk\iot_sdk\Debug\List
#        --diag_suppress Pa050,Ta022,Ta023 --diag_error Pe606 -o
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\out_iar\mt7697_hdk\iot_sdk\Debug\Obj
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0_2\arm\INC\c\DLib_Config_Full.h" -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\kernel\service\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\kernel\rtos\FreeRTOS\Source\include\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\kernel\rtos\FreeRTOS\Source\portable\IAR\ARM_CM4F\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\kernel\rtos\FreeRTOS\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\driver\CMSIS\Device\MTK\mt7687\Include\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\driver\CMSIS\Include\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\third_party\lwip\src\include\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\third_party\lwip\ports\include\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\driver\chip\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\driver\chip\mt7687\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\MTK\wifi_service\combo\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\MTK\dhcpd\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\MTK\minicli\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\MTK\minisupp\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\prebuilt\middleware\MTK\minisupp\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\driver\chip\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\driver\chip\mt7687\src\common\include\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\third_party\lwip\src\include\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\third_party\lwip\ports\include\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\third_party\lwip\src\include\lwip\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\project\common\bsp_ex\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\MTK\nvdm\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\third_party\ping\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\MTK\smtcn\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\MTK\smtcn\inc\internal\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\MTK\iperf\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\project\mt7697_hdk\apps\iot_sdk\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\driver\chip\mt7687\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\driver\board\mt76x7_hdk\util\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\MTK\wifi_service\combo\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\MTK\bluetooth\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\prebuilt\middleware\MTK\bluetooth\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\project\mt7697_hdk\apps\iot_sdk\src\ut_app\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\driver\board\mt76x7_hdk\ept\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\third_party\mbedtls\include\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\third_party\mbedtls\configs\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\driver\board\mt76x7_hdk\external_flash\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\EWARM\..\..\..\..\..\middleware\MTK\connsys\inc\
#        -Om -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0_2\arm\CMSIS\Include\")
#    Locale       =  C
#    List file    =  
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\out_iar\mt7697_hdk\iot_sdk\Debug\List\connection_info.lst
#    Object file  =  
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\out_iar\mt7697_hdk\iot_sdk\Debug\Obj\connection_info.o
#
###############################################################################

C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\apps\iot_sdk\src\ut_app\connection_info.c
      1          /* Copyright Statement:
      2           *
      3           * (C) 2005-2016  MediaTek Inc. All rights reserved.
      4           *
      5           * This software/firmware and related documentation ("MediaTek Software") are
      6           * protected under relevant copyright laws. The information contained herein
      7           * is confidential and proprietary to MediaTek Inc. ("MediaTek") and/or its licensors.
      8           * Without the prior written permission of MediaTek and/or its licensors,
      9           * any reproduction, modification, use or disclosure of MediaTek Software,
     10           * and information contained herein, in whole or in part, shall be strictly prohibited.
     11           * You may only use, reproduce, modify, or distribute (as applicable) MediaTek Software
     12           * if you have agreed to and been bound by the applicable license agreement with
     13           * MediaTek ("License Agreement") and been granted explicit permission to do so within
     14           * the License Agreement ("Permitted User").  If you are not a Permitted User,
     15           * please cease any access or use of MediaTek Software immediately.
     16           * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
     17           * THAT MEDIATEK SOFTWARE RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES
     18           * ARE PROVIDED TO RECEIVER ON AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL
     19           * WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
     20           * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
     21           * NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
     22           * SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
     23           * SUPPLIED WITH MEDIATEK SOFTWARE, AND RECEIVER AGREES TO LOOK ONLY TO SUCH
     24           * THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. RECEIVER EXPRESSLY ACKNOWLEDGES
     25           * THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES
     26           * CONTAINED IN MEDIATEK SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK
     27           * SOFTWARE RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
     28           * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND
     29           * CUMULATIVE LIABILITY WITH RESPECT TO MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
     30           * AT MEDIATEK'S OPTION, TO REVISE OR REPLACE MEDIATEK SOFTWARE AT ISSUE,
     31           * OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY RECEIVER TO
     32           * MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
     33           */
     34          
     35          #include "connection_info.h"
     36          #include "bt_debug.h"
     37          #include <string.h>
     38          
     39          app_bt_connection_cb_t connection_cb[BT_CONNECTION_MAX] = {{0}};
     40          app_bt_bonded_info_t bonded_info_req[BT_CONNECTION_MAX] = {{{0}}};
     41          static const bt_addr_t default_bt_addr = {
     42                                 .type = BT_ADDR_TYPE_UNKNOW,
     43                                 .addr = {0}
     44                                 };
     45          
     46          void add_connection_info(void *buff)
     47          {
     48              uint8_t i;
     49          
     50              bt_gap_le_connection_ind_t *connection_ind = (bt_gap_le_connection_ind_t *)buff;
     51              for (i =0; i< BT_CONNECTION_MAX; i++) {
     52                  if (connection_cb[i].connection_handle==0) {
     53                      connection_cb[i].connection_handle = connection_ind->connection_handle;
     54                      connection_cb[i].role = connection_ind->role;
     55                      connection_cb[i].peer_addr = connection_ind->peer_addr;
     56                      break;
     57                  }
     58              }
     59              if (i == BT_CONNECTION_MAX) {
     60                  BT_LOGW("APP", "Reach maximum connection\n");
     61              }
     62          }
     63          
     64          void dump_connection_info_list()
     65          {
     66              uint8_t i;
     67              for (i = 0; i< BT_CONNECTION_MAX ; i++) {
     68                  if (connection_cb[i].connection_handle) {
     69                      BT_LOGD("APP", "Connection Info[%d]: [%s] [0x%04x] [%s]",i,bt_debug_addr2str(&(connection_cb[i].peer_addr)), connection_cb[i].connection_handle, connection_cb[i].role?"Slave":"Master");
     70                  }
     71              }
     72          }
     73          
     74          void delete_connection_info(void *buff)
     75          {
     76              bt_hci_evt_disconnect_complete_t *disconnect_complete;
     77              uint8_t i;
     78          
     79              disconnect_complete = (bt_hci_evt_disconnect_complete_t*) buff;
     80              for (i = 0; i< BT_CONNECTION_MAX ; i++) {
     81                  if (disconnect_complete->connection_handle == connection_cb[i].connection_handle) {
     82                      connection_cb[i].connection_handle = 0;//clear conneciton info.
     83                      connection_cb[i].gatts_wait_att_rx_opcode = 0;
     84                      break;
     85                  }
     86              }
     87              if (i == BT_CONNECTION_MAX) {
     88                  BT_LOGW("APP", "Don't know connection info for deleting.\n");
     89              }
     90          }
     91          app_bt_connection_cb_t* find_conneciton_info_by_handle(bt_handle_t target_handle)
     92          {
     93              uint8_t i;
     94              for (i = 0; i< BT_CONNECTION_MAX; i++) {
     95                  if (target_handle == connection_cb[i].connection_handle) {
     96                      return &(connection_cb[i]);
     97                  }
     98              }
     99              return NULL;
    100          }
    101          app_bt_bonded_info_t* get_bonded_info(const bt_addr_t *target_bt, uint8_t create)
    102          {
    103              uint8_t i;
    104              //Check have we been bonded?
    105              for (i = 0; i< BT_CONNECTION_MAX ; i++) {
    106                  if (0 == memcmp(target_bt,&(bonded_info_req[i].bt_addr), sizeof(default_bt_addr))) {
    107                      return &(bonded_info_req[i]);
    108                  }
    109              }
    110              //Give a new
    111              if (create) {
    112                  for (i = 0; i< BT_CONNECTION_MAX ; i++) {
    113                      if (0 == memcmp(&default_bt_addr,&(bonded_info_req[i].bt_addr), sizeof(default_bt_addr))) {
    114                          bonded_info_req[i].info.identity_addr.address.type = BT_ADDR_TYPE_UNKNOW;
    115                          memcpy(&(bonded_info_req[i].bt_addr), target_bt, sizeof(default_bt_addr));
    116                          return &(bonded_info_req[i]);
    117                      }
    118                  }
    119              }
    120              //Out of memory
    121              return NULL;
    122          }
    123          app_bt_bonded_info_t* find_bonded_info_by_index(uint8_t idx)
    124          {
    125              if (idx <BT_CONNECTION_MAX) {
    126                  if (0 != memcmp(&default_bt_addr,&(bonded_info_req[idx].bt_addr), sizeof(default_bt_addr))) {
    127                      return &(bonded_info_req[idx]);
    128                  } else {
    129                      return NULL;
    130                  }
    131              } else {
    132                  return NULL;
    133              }
    134          }
    135          app_bt_bonded_info_t* find_bonded_info_by_handle(bt_handle_t target_handle)
    136          {
    137              app_bt_connection_cb_t *con = find_conneciton_info_by_handle(target_handle);
    138              return get_bonded_info(&(con->peer_addr), 0);
    139          }
    140          void cancel_bonded_info(const bt_addr_t *target_bt)
    141          {
    142              uint8_t i;
    143              for (i = 0; i< BT_CONNECTION_MAX ; i++) {
    144                  if (0 == memcmp(target_bt,&(bonded_info_req[i].bt_addr), sizeof(default_bt_addr))) {
    145                      memset(&(bonded_info_req[i]),0x00, sizeof(app_bt_bonded_info_t));
    146                      bonded_info_req[i].info.identity_addr.address.type = BT_ADDR_TYPE_UNKNOW;
    147                      BT_LOGD("APP", "Cancel bonded info for BT addr %s",bt_debug_addr2str(target_bt));
    148                  }
    149              }
    150          }
    151          void clear_bonded_info()
    152          {
    153              uint8_t i;
    154              for (i = 0; i< BT_CONNECTION_MAX ; i++) {
    155                  memset(&(bonded_info_req[i]),0x00, sizeof(app_bt_bonded_info_t));
    156                  bonded_info_req[i].bt_addr.type = BT_ADDR_TYPE_UNKNOW;
    157                  bonded_info_req[i].info.identity_addr.address.type = BT_ADDR_TYPE_UNKNOW;
    158              }
    159          }
    160          void dump_bonded_info_list()
    161          {
    162              uint8_t i;
    163              for (i = 0; i< BT_CONNECTION_MAX ; i++) {
    164                  if (0 != memcmp(&default_bt_addr,&(bonded_info_req[i].bt_addr), sizeof(default_bt_addr))) {
    165                      BT_LOGD("APP", "Bonded Info[%d]: [%s]",i,bt_debug_addr2str(&(bonded_info_req[i].bt_addr)));
    166                  }
    167              }
    168          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   add_connection_info
         8   -> __aeabi_memcpy
         0   -> bt_debug_log
      16   cancel_bonded_info
        16   -> __aeabi_memset
        16   -> bt_debug_addr2str
        16   -> bt_debug_log
        16   -> memcmp
      24   clear_bonded_info
        24   -> __aeabi_memset
       8   delete_connection_info
         0   -> bt_debug_log
      16   dump_bonded_info_list
        16   -> bt_debug_addr2str
        16   -> bt_debug_log
        16   -> memcmp
      24   dump_connection_info_list
        24   -> bt_debug_addr2str
        24   -> bt_debug_log
       8   find_bonded_info_by_handle
         8   -> find_conneciton_info_by_handle
         0   -> get_bonded_info
      16   find_bonded_info_by_index
        16   -> memcmp
       8   find_conneciton_info_by_handle
      24   get_bonded_info
        24   -> __aeabi_memcpy
        24   -> memcmp


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable16
       4  ??DataTable16_1
      36  ?_0
      52  ?_1
       8  ?_2
       8  ?_3
      52  ?_4
      44  ?_5
      32  ?_6
      68  add_connection_info
    2240  bonded_info_req
      72  cancel_bonded_info
      42  clear_bonded_info
     176  connection_cb
       8  default_bt_addr
      58  delete_connection_info
      58  dump_bonded_info_list
      68  dump_connection_info_list
      16  find_bonded_info_by_handle
      46  find_bonded_info_by_index
      42  find_conneciton_info_by_handle
     112  get_bonded_info

 
 2 416 bytes in section .bss
   830 bytes in section .text
 
   830 bytes of CODE memory
 2 416 bytes of DATA memory

Errors: none
Warnings: none
