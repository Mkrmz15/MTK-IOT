###############################################################################
#
# IAR ANSI C/C++ Compiler V8.11.2.13589/W32 for ARM       27/Jun/2017  22:46:50
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\hal_examples\i2c_control_EEPROM_with_polling\src\main.c
#    Command line =  
#        -f C:\Users\leo\AppData\Local\Temp\EWE299.tmp
#        (C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\hal_examples\i2c_control_EEPROM_with_polling\src\main.c
#        -lcN
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\out_iar\mt7697_hdk\i2c_control_EEPROM_with_polling\List
#        -lA
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\out_iar\mt7697_hdk\i2c_control_EEPROM_with_polling\List
#        --diag_suppress Pa050,Ta022,Ta023 --diag_error Pe606 -o
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\out_iar\mt7697_hdk\i2c_control_EEPROM_with_polling\Obj
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0_2\arm\INC\c\DLib_Config_Full.h" -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\hal_examples\i2c_control_EEPROM_with_polling\EWARM\..\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\hal_examples\i2c_control_EEPROM_with_polling\EWARM\..\..\..\..\..\driver\chip\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\hal_examples\i2c_control_EEPROM_with_polling\EWARM\..\..\..\..\..\driver\chip\mt7687\inc\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\hal_examples\i2c_control_EEPROM_with_polling\EWARM\..\..\..\..\..\driver\chip\mt7687\src\common\include\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\hal_examples\i2c_control_EEPROM_with_polling\EWARM\..\..\..\..\..\driver\CMSIS\Include\
#        -I
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\hal_examples\i2c_control_EEPROM_with_polling\EWARM\..\..\..\..\..\driver\CMSIS\Device\MTK\mt7687\Include\
#        -Om -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0_2\arm\CMSIS\Include\")
#    Locale       =  C
#    List file    =  
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\out_iar\mt7697_hdk\i2c_control_EEPROM_with_polling\List\main.lst
#    Object file  =  
#        C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\out_iar\mt7697_hdk\i2c_control_EEPROM_with_polling\Obj\main.o
#
###############################################################################

C:\LEO\myGit\MTK-IOT\SDK_V4.3.0\project\mt7697_hdk\hal_examples\i2c_control_EEPROM_with_polling\src\main.c
      1          /* Copyright Statement:
      2           *
      3           * (C) 2005-2016  MediaTek Inc. All rights reserved.
      4           *
      5           * This software/firmware and related documentation ("MediaTek Software") are
      6           * protected under relevant copyright laws. The information contained herein
      7           * is confidential and proprietary to MediaTek Inc. ("MediaTek") and/or its licensors.
      8           * Without the prior written permission of MediaTek and/or its licensors,
      9           * any reproduction, modification, use or disclosure of MediaTek Software,
     10           * and information contained herein, in whole or in part, shall be strictly prohibited.
     11           * You may only use, reproduce, modify, or distribute (as applicable) MediaTek Software
     12           * if you have agreed to and been bound by the applicable license agreement with
     13           * MediaTek ("License Agreement") and been granted explicit permission to do so within
     14           * the License Agreement ("Permitted User").  If you are not a Permitted User,
     15           * please cease any access or use of MediaTek Software immediately.
     16           * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
     17           * THAT MEDIATEK SOFTWARE RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES
     18           * ARE PROVIDED TO RECEIVER ON AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL
     19           * WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
     20           * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
     21           * NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
     22           * SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
     23           * SUPPLIED WITH MEDIATEK SOFTWARE, AND RECEIVER AGREES TO LOOK ONLY TO SUCH
     24           * THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. RECEIVER EXPRESSLY ACKNOWLEDGES
     25           * THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES
     26           * CONTAINED IN MEDIATEK SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK
     27           * SOFTWARE RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
     28           * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND
     29           * CUMULATIVE LIABILITY WITH RESPECT TO MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
     30           * AT MEDIATEK'S OPTION, TO REVISE OR REPLACE MEDIATEK SOFTWARE AT ISSUE,
     31           * OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY RECEIVER TO
     32           * MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
     33           */
     34          
     35          /* Includes ------------------------------------------------------------------*/
     36          #include <stdint.h>
     37          #include <stdio.h>
     38          #include <string.h>
     39          
     40          /* hal includes */
     41          #include "hal.h"
     42          #include "system_mt7687.h"
     43          #include "top.h"
     44          
     45          /* Private typedef -----------------------------------------------------------*/
     46          /* Private define ------------------------------------------------------------*/
     47          /* Private macro -------------------------------------------------------------*/
     48          #define I2C0_EEPROM_SLAVE_ADDRESS 0x50  //FOR I2C0
     49          #define I2C_SEND_DATA_NUMBER 32
     50          
     51          /* Private variables ---------------------------------------------------------*/
     52          const uint8_t i2c_send_data[I2C_SEND_DATA_NUMBER] = {0x00, 0x00, 0xFF, 0xAA, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
     53                                                               0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F
     54                                                              };
     55          static uint8_t i2c_receive_data[I2C_SEND_DATA_NUMBER] = {0};
     56          static volatile uint8_t is_transaction_finish = 0;
     57          static volatile uint8_t is_dma_transaction_finish = 0;
     58          static volatile uint32_t test_length = 8; /* One single write should be a maximum size of 16bytes */
     59          
     60          
     61          /* Private functions ---------------------------------------------------------*/
     62          
     63          #ifdef __GNUC__
     64          int __io_putchar(int ch)
     65          #else
     66          int fputc(int ch, FILE *f)
     67          #endif
     68          {
     69              /* Place your implementation of fputc here */
     70              /* E.g. write a character to the HAL_UART_0 one at a time */
     71              hal_uart_put_char(HAL_UART_0, ch);
     72              return ch;
     73          }
     74          
     75          /**
     76          *@brief Set pinmux to UART and initialize UART hardware initialization for logging.
     77          *@param None.
     78          *@return None.
     79          */
     80          static void plain_log_uart_init(void)
     81          {
     82              hal_uart_config_t uart_config;
     83              /* Set Pinmux to UART */
     84              hal_pinmux_set_function(HAL_GPIO_0, HAL_GPIO_0_UART1_RTS_CM4);
     85              hal_pinmux_set_function(HAL_GPIO_1, HAL_GPIO_1_UART1_CTS_CM4);
     86              hal_pinmux_set_function(HAL_GPIO_2, HAL_GPIO_2_UART1_RX_CM4);
     87              hal_pinmux_set_function(HAL_GPIO_3, HAL_GPIO_3_UART1_TX_CM4);
     88          
     89              /* COM port settings */
     90              uart_config.baudrate = HAL_UART_BAUDRATE_115200;
     91              uart_config.word_length = HAL_UART_WORD_LENGTH_8;
     92              uart_config.stop_bit = HAL_UART_STOP_BIT_1;
     93              uart_config.parity = HAL_UART_PARITY_NONE;
     94              hal_uart_init(HAL_UART_0, &uart_config);
     95          }
     96          
     97          /**
     98          *@brief Configure and initialize the systerm clock.
     99          *@param None.
    100          *@return None.
    101          */
    102          static void SystemClock_Config(void)
    103          {
    104              top_xtal_init();
    105          }
    106          
    107          /**
    108          *@brief  Initialize the periperal driver in this function. In this example, we initialize UART drivers.
    109          *@param None.
    110          *@return None.
    111          */
    112          static void prvSetupHardware(void)
    113          {
    114              /* Peripherals initialization */
    115              plain_log_uart_init();
    116          }
    117          
    118          /**
    119          *@brief  In this function, we send datum to EEPROM and read them back to verify the success of i2c communication with EEPROM.
    120          *@param None.
    121          *@return None.
    122          */
    123          static void i2c_control_EEPROM_with_polling_example()
    124          {
    125          
    126              hal_i2c_config_t i2c_init;
    127              uint32_t i;
    128              hal_i2c_frequency_t input_frequency = HAL_I2C_FREQUENCY_400K;
    129              hal_i2c_port_t i2c_port = HAL_I2C_MASTER_0;
    130              uint32_t test_fail = 0;
    131          
    132              printf("I2C test case begin\r\n");
    133          
    134              /*Step1: Init GPIO and set GPIO pinmux(if EPT tool hasn't been used to configure the related pinmux).*/
    135              hal_gpio_init(HAL_GPIO_27);
    136              hal_gpio_init(HAL_GPIO_28);
    137              /* Call hal_pinmux_set_function() to set GPIO pinmux */
    138              hal_pinmux_set_function(HAL_GPIO_27, HAL_GPIO_27_I2C1_CLK);
    139              hal_pinmux_set_function(HAL_GPIO_28, HAL_GPIO_28_I2C1_DATA);
    140          
    141              /*Step2: Write data to i2c slave.*/
    142              /* Initialize I2C */
    143              i2c_init.frequency = input_frequency;
    144              hal_i2c_master_init(i2c_port, &i2c_init);
    145              hal_i2c_master_send_polling(i2c_port, I2C0_EEPROM_SLAVE_ADDRESS, i2c_send_data, test_length);
    146              /*Wait some time till the data is stable*/
    147              hal_gpt_delay_ms(200);
    148              /* Deinitialize I2C */
    149              hal_i2c_master_deinit(i2c_port);
    150              /*Step3: Write 1 byte to slave to indicate the address you want to read.*/
    151              /* Initialize I2C */
    152              i2c_init.frequency = input_frequency;
    153              hal_i2c_master_init(i2c_port, &i2c_init);
    154              /* Write 1 byte to slave to indicate the address you want to read */
    155              hal_i2c_master_send_polling(i2c_port, I2C0_EEPROM_SLAVE_ADDRESS, i2c_send_data, 1);
    156              /*Wait some time till the data is stable*/
    157              hal_gpt_delay_ms(200);
    158              /* Deinitialize I2C */
    159              hal_i2c_master_deinit(i2c_port);
    160          
    161              /*Step4: Read data back from i2c slave.*/
    162              /* Initialize I2C */
    163              i2c_init.frequency = input_frequency;
    164              hal_i2c_master_init(i2c_port, &i2c_init);
    165              /* Read data back to check if data transfer is successful. */
    166              hal_i2c_master_receive_polling(i2c_port, I2C0_EEPROM_SLAVE_ADDRESS, i2c_receive_data, test_length - 1);
    167              /* Deinitialize I2C */
    168              hal_i2c_master_deinit(i2c_port);
    169          
    170              /*Step5: Compare the write data and the read back data to check if data transfer is successful.*/
    171              printf("begin compare...\n");
    172              for (i = 0; i < (test_length - 1); i++) {
    173                  if (i2c_send_data[i + 1] != i2c_receive_data[i]) {
    174                      test_fail = 1;
    175                      log_hal_error("I2C test failed\n");
    176                      break;
    177                  }
    178              }
    179              if (0 == test_fail) {
    180                  printf("\r\nI2C test is successful\n");
    181              }
    182          
    183              hal_gpio_deinit(HAL_GPIO_27);
    184              hal_gpio_deinit(HAL_GPIO_28);
    185          
    186          }
    187          
    188          int main(void)
    189          {
    190              /* Configure system clock */
    191              SystemClock_Config();
    192          
    193              /* Configure the hardware */
    194              prvSetupHardware();
    195          
    196              /* Enable I,F bits */
    197              __enable_irq();
    198              __enable_fault_irq();
    199          
    200              /* Add your application code here */
    201              printf("\r\n\r\n");/* The output UART used by log_hal_info is set by plain_log_uart_init() */
    202              printf("welcome to main()\r\n");
    203              printf("\r\n\r\n");
    204          
    205              i2c_control_EEPROM_with_polling_example();
    206          
    207              for (;;);
    208          }
    209          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   SystemClock_Config
         0   -> top_xtal_init
       8   fputc
         8   -> hal_uart_put_char
      24   i2c_control_EEPROM_with_polling_example
        24   -> hal_gpio_deinit
        24   -> hal_gpio_init
        24   -> hal_gpt_delay_ms
        24   -> hal_i2c_master_deinit
        24   -> hal_i2c_master_init
        24   -> hal_i2c_master_receive_polling
        24   -> hal_i2c_master_send_polling
        24   -> hal_pinmux_set_function
        24   -> log_hal_error_internal
        24   -> printf
       8   main
         8   -> SystemClock_Config
         8   -> i2c_control_EEPROM_with_polling_example
         8   -> printf
         8   -> prvSetupHardware
       8   plain_log_uart_init
         8   -> hal_pinmux_set_function
         8   -> hal_uart_init
       0   prvSetupHardware
         0   -> plain_log_uart_init


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable9
      24  ?_0
      20  ?_1
      20  ?_2
      28  ?_3
       8  ?_4
      20  ?_5
       4  SystemClock_Config
      18  fputc
     232  i2c_control_EEPROM_with_polling_example
      36  i2c_receive_data
          test_length
      32  i2c_send_data
      44  main
      60  plain_log_uart_init
       2  prvSetupHardware
      40  -- Other

 
  36 bytes in section .data
 556 bytes in section .text
 
 556 bytes of CODE memory
  36 bytes of DATA memory

Errors: none
Warnings: none
